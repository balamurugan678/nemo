<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="AutomatedWebservicesRegression" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
<con:settings/>
<con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:settings/>

<con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
<con:endpoint>http://localhost</con:endpoint>
</con:endpoints>
<con:resource name="Localhost" path="">
<con:settings/>
<con:parameters/>
<con:method name="GET" method="GET">
<con:settings/>
<con:parameters/>
<con:representation type="FAULT">
<con:mediaType>text/html;charset=utf-8</con:mediaType>
<con:status>400 401 404 500</con:status>
<con:params/>
<con:element>html</con:element>
</con:representation>
<con:representation type="REQUEST">
<con:mediaType>application/json</con:mediaType>
<con:params/>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType>application/json</con:mediaType>
<con:status>200</con:status>
<con:params/>
<con:element>Response</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:request name="Request 1" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:endpoint>http://localhost</con:endpoint>
<con:request/>
<con:credentials>
<con:username xsi:nil="true"/>
<con:password xsi:nil="true"/>
<con:domain xsi:nil="true"/>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:request>
</con:method>
<con:method name="POST" method="POST">
<con:settings/>
<con:parameters/>
<con:representation type="REQUEST">
<con:mediaType>application/json</con:mediaType>
<con:params/>
</con:representation>
<con:representation type="FAULT">
<con:mediaType>text/html;charset=utf-8</con:mediaType>
<con:status>400 401 404 500</con:status>
<con:params/>
<con:element>html</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType>application/json</con:mediaType>
<con:status>200</con:status>
<con:params/>
<con:element xmlns:get="http://localhost/nemo-tfl-services/product/getPayAsYouGo">get:Response</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:endpoint>http://localhost</con:endpoint>
<con:request/>
<con:credentials>
<con:username xsi:nil="true"/>
<con:password xsi:nil="true"/>
<con:domain xsi:nil="true"/>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:request>
</con:method>
<con:method name="PUT" method="PUT">
<con:settings/>
<con:parameters/>
<con:representation type="REQUEST">
<con:mediaType>application/json</con:mediaType>
<con:params/>
</con:representation>
<con:representation type="FAULT">
<con:mediaType>text/html;charset=utf-8</con:mediaType>
<con:status>400 500</con:status>
<con:params/>
<con:element>html</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType>application/json</con:mediaType>
<con:status>200</con:status>
<con:params/>
<con:element xmlns:nemo="http://localhost/nemo-tfl-services/customer/nemo-tfl-services/">nemo:Response</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType xsi:nil="true"/>
<con:status>0</con:status>
<con:params/>
<con:element>data</con:element>
</con:representation>
<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:endpoint>http://localhost</con:endpoint>
<con:request/>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:request>
</con:method>
<con:method name="DELETE" method="DELETE">
<con:settings/>
<con:parameters/>
<con:representation type="FAULT">
<con:mediaType>text/html;charset=utf-8</con:mediaType>
<con:status>401 400</con:status>
<con:params/>
<con:element>html</con:element>
</con:representation>
<con:representation type="RESPONSE">
<con:mediaType>application/json</con:mediaType>
<con:status>200</con:status>
<con:params/>
<con:element xmlns:cart="http://localhost/nemo-tfl-services/cart/$(Cart">cart:Response</con:element>
</con:representation>
<con:request name="Request 1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:endpoint>http://localhost</con:endpoint>
<con:request/>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:request>
</con:method>
</con:resource>
</con:interface>
<con:testSuite name="Automated Test - Adult - No Disocunt">
<con:settings/>
<con:runType>SEQUENTIAL</con:runType>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Create" searchProperties="true" id="ed203367-dc7b-4e24-a4ef-20ca0af1a277">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInputs Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>oysterNumber</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetOysterNumber</con:sourceStep>
<con:targetType>oysterNumber</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false">
<con:name>nextDayDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>dateString</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GetReferenceData">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="GetReferenceData" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/referenceData</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/product/referenceData</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.size() >0
def count = 0;
for(def item: json){
	if(item.name == "PassengerTypes" || item.name == "DiscountTypes"){
		count++;
		assert true;
	}
}
if(count &lt;2 || count>2)
{
	assert false;
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetEmailAddress">
<con:settings/>
<con:config>
<script>Random random = new Random()
def randUserAccount = "automatedTesting" 
def domain= "@gmail.com"
int max = 10000
randnum = random.nextInt(max+10000)
return randUserAccount += randnum + domain</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Email Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>emailAddress</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetEmailAddress</con:sourceStep>
<con:targetType>emailAddress</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer ReferenceData">
<con:settings/>
<con:config>
<script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["GetReferenceData"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


if(json != null &amp;&amp; json.size() >0){
	for(def item: json){
		if(item.name == "Duration"){
			for(def i : item.items){
				testRunner.testCase.testSuite.setPropertyValue(i.value, i.value)
			}
		}
		if(item.name == "DiscountTypes"){
			for(def dItem : item.items){
				if(dItem.text == "No Discount"){
				testRunner.testCase.testSuite.setPropertyValue('discountType', dItem.value)}
			}
			
		} 
		if(item.name == "PassengerTypes"){
			for(def pItem : item.items){
			if(pItem.text == "Adult"){
				testRunner.testCase.testSuite.setPropertyValue('passengerType', pItem.value)
			}
			}
		} 
		
		
	}
}
</script>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${#TestSuite#oysterNumber}",
"passengerType":"${#TestSuite#passengerType}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get All Active Stations">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get All Active Stations" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/station/stations</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/station/stations</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.size >0
for(def x: json){
	assert x.id != null
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer Station">
<con:settings/>
<con:config>
<script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["Station - Get All Active Stations"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


for(def station: json){
	if(station.name == context.expand('${InitialInputs#stationName}')){
		testRunner.testCase.testSuite.setPropertyValue('stationid',station.id.toString())
	}
}
</script>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>emailAddress</con:name>
<con:value>automatedTesting6216@gmail.com</con:value>
</con:property>
<con:property>
<con:name>dateString</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>3000</con:value>
</con:property>
<con:property>
<con:name>stationName</con:name>
<con:value>Greenford</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>258456</con:value>
</con:property>
<con:property><con:name>zone4</con:name><con:value>4</con:value></con:property></con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer</con:endpoint>
<con:request>{
"title" :"Miss",
"firstName" :"Samantha Wanda",
"initials" :"S",
"lastName" :"Jones",
"houseNameNumber" :"38",
"street" :"Nightingale Gardens",
"town" : "Rugby",
"county" :"Warwickshire",
"country" :"GB",
"postcode" :"CV230WT",
"homePhone" :"01234567891",
"mobilePhone" :"01234567899",
"emailAddress" :"${InitialInputs#emailAddress}",
"username":"${InitialInputs#emailAddress}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/customer/nemo-tfl-services/</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.errors == null
assert json.id != null
assert json.username == context.expand('${InitialInputs#emailAddress}')</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion">
<con:configuration/>
</con:assertion>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Customer">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44563</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Customer Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>customerid</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Customer</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>testSuiteCustomerId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>customerid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>testSuiteCardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>cardid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44567</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${InitialInputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3210</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37130</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#dateString}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayBusPass">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayBusPass" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getBusPass</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#zone4}" ,
"startDate" : "${InitialInputs#dateString}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Bus'
assert json.name != null</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day Bus Pass">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2100</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 Day Bus Pass Bus Zones 1 to 4</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>4</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Bus</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37374</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Bus Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   },

   {
         "errors": null,
         "price": ${7Day TravelCard#price},
         "name": "${7Day TravelCard#name}",
         "startDate": ${7Day TravelCard#startDate},
         "endDate": ${7Day TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${7Day TravelCard#startZone},
         "endZone": ${7Day TravelCard#endZone},
         "duration": "${7Day TravelCard#duration}",
         "productType": "${7Day TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard#prePaidProductReference}"
      }
      ,

   {
         "errors": null,
         "price": ${7Day Bus Pass#price},
         "name": "${7Day Bus Pass#name}",
         "startDate": ${7Day Bus Pass#startDate},
         "endDate": ${7Day Bus Pass#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${7Day Bus Pass#startZone},
         "endZone": ${7Day Bus Pass#endZone},
         "duration": "${7Day Bus Pass#duration}",
         "productType": "${7Day Bus Pass#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day Bus Pass#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - GetCart">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - GetCart" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36312</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent;
def json = new JsonSlurper().parseText res

assert json != null
assert json.id != null
assert json.errors == null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44574</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44575</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${Customer#id}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44574</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${Customer#id}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Station - Get Outstanding Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get Outstanding Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${Customer#id}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer/2834/2837/outstanding</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.errors == null
assert json.name == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones" searchProperties="true" id="0da6c249-7c19-4c9f-a614-a9d358638b98">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 5DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 5)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 5DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>10/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3210</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37130</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2410</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 2 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421366400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37148</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 2" searchProperties="true" id="ab71b509-355c-4410-9297-ff7cd8e8c412">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 5DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 5)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 5DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>10/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2410</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 2 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37148</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3210</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421366400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37130</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44598</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 3" searchProperties="true" id="c6dfbdfd-2dfb-4b9d-a0d6-907d435a01bd">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>08/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3190</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 2 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37152</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone5}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3210</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420675200000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421193600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37130</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44600</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 4" searchProperties="true" id="b80de167-c5a3-4498-a43f-b3e4eb60baab">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1MonthAnd3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 4)
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1MonthAnd3DaysAhead</con:sourceStep>
<con:targetType>endDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>08/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>zone6</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>endDate1</con:name>
<con:value>09/02/2015</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3770</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37132</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2410</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420675200000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421193600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37190</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate1}",
"endDate":"${InitialInputs#endDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>&lt;price null="true" xmlns="http://localhost/nemo-tfl-services/product/getTravelcard"/>
</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>1-2 months Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1423440000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>41393</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44602</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
      ,
      {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Bus Pass Zones" searchProperties="true" id="f9abeaab-da08-4631-94f3-45433d662aa3"><con:settings/><con:testStep type="groovy" name="GetDate - StartDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10)
{
	day = "0"+day;
}

def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month &lt;10){
	month = "0"+month
}
return(day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep><con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - StartDate</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate</con:name>
<con:value>04/01/2015</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>1500</con:value>
</con:property>

<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>4</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Product - Get1MonthBusPass">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get1MonthBusPass" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getBusPass</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#1Month}", 
"startZone":${Inputs#startZone},  
"endZone": ${Inputs#endZone} ,
"startDate" : "${Inputs#startDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Bus'
assert json.name != null</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="1Month Bus Pass">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>8070</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Monthly Bus Pass Zone 1 to 4</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420329600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1422921600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>4</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Bus</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37366</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="1Month Bus Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Product - Get7DayBusPass">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayBusPass" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getBusPass</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${Inputs#startZone}",  
"endZone": "${Inputs#endZone}" ,
"startDate" : "${Inputs#startDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Bus'
assert json.name != null</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="7Day Bus Pass">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2100</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 Day Bus Pass Bus Zones 1 to 4</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420329600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>4</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Bus</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37374</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="7Day Bus Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayBusPass</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44606</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [   
   {
         "errors": null,
         "price": ${7Day Bus Pass#price},
         "name": "${7Day Bus Pass#name}",
         "startDate": ${7Day Bus Pass#startDate},
         "endDate": ${7Day Bus Pass#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${7Day Bus Pass#startZone},
         "endZone": ${7Day Bus Pass#endZone},
         "duration": "${7Day Bus Pass#duration}",
         "productType": "${7Day Bus Pass#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day Bus Pass#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${1Month Bus Pass#price},
         "name": "${1Month Bus Pass#name}",
         "startDate": ${1Month Bus Pass#startDate},
         "endDate": ${1Month Bus Pass#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${1Month Bus Pass#startZone},
         "endZone": ${1Month Bus Pass#endZone},
         "duration": "${1Month Bus Pass#duration}",
         "productType": "${1Month Bus Pass#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${1Month Bus Pass#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0
assert json.errors != null
assert json.errors.size() > 0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/></con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Cancel Order" searchProperties="true" id="3d9285da-7224-4805-840b-250709a4a456">
<con:settings/>
<con:testStep type="groovy" name="GetDate - StartDate">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10)
{
	day = "0"+day;
}

def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month &lt;10){
	month = "0"+month
}
return(day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - StartDate</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>1500</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property><con:name>zone4</con:name><con:value>4</con:value></con:property></con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1500</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${Inputs#startZone}",  
"endZone": "${Inputs#endZone}" ,
"startDate" : "${Inputs#startDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3210</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37130</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get1MonthBusPass">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get1MonthBusPass" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getBusPass</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#1Month}", 
"startZone":"${Inputs#startZone}",  
"endZone": "${Inputs#zone4}" ,
"startDate" : "${Inputs#startDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Bus'
assert json.name != null</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="1Month Bus Pass">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>8070</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Monthly Bus Pass Zone 1 to 4</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1423094400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>4</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Bus</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37366</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="1Month Bus Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthBusPass</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>1Month Bus Pass</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44608</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   },      
   {
         "errors": null,
         "price": ${7Day TravelCard#price},
         "name": "${7Day TravelCard#name}",
         "startDate": ${7Day TravelCard#startDate},
         "endDate": ${7Day TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard#startZone},
         "endZone": ${7Day TravelCard#endZone},
         "duration": "${7Day TravelCard#duration}",
         "productType": "${7Day TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${1Month Bus Pass#price},
         "name": "${1Month Bus Pass#name}",
         "startDate": ${1Month Bus Pass#startDate},
         "endDate": ${1Month Bus Pass#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${1Month Bus Pass#startZone},
         "endZone": ${1Month Bus Pass#endZone},
         "duration": "${1Month Bus Pass#duration}",
         "productType": "${1Month Bus Pass#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${1Month Bus Pass#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - GetCart">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - GetCart" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36312</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent;
def json = new JsonSlurper().parseText res

assert json != null
assert json.id != null
assert json.errors == null
assert json.cartItems.size() >1
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44615</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44616</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${Inputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Get">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Get" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/customer/36283</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44615</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Travelcard Order Processing" searchProperties="true" id="f19bb4e1-c9e1-4638-b554-c43ae1d3eaa6">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 6MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 6)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1Year Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 6MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate6Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1Year Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDateAnnual</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone11</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate6Month</con:name>
<con:value>05/07/2015</con:value>
</con:property>
<con:property>
<con:name>startDateAnnual</con:name>
<con:value>05/01/2016</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="6Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>201370</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>6 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1436050800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1451865600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37383</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get6MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get6MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#6Month}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone11}" ,
"startDate" : "${InitialInputs#startDate6Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="6Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDateAnnual}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>128400</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Annual Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1451952000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1483488000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>36961</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44637</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${6Month TravelCard#price},
         "name": "${6Month TravelCard#name}",
         "startDate": ${6Month TravelCard#startDate},
         "endDate": ${6Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${6Month TravelCard#startZone},
         "endZone": ${6Month TravelCard#endZone},
         "duration": "${6Month TravelCard#duration}",
         "productType": "${6Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${6Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${Annual TravelCard#price},
         "name": "${Annual TravelCard#name}",
         "startDate": ${Annual TravelCard#startDate},
         "endDate": ${Annual TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${Annual TravelCard#startZone},
         "endZone": ${Annual TravelCard#endZone},
         "duration": "${Annual TravelCard#duration}",
         "productType": "${Annual TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Annual TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44641</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44642</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOutstandingOrders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOutstandingOrders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
assert json.id != null
assert json.name != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44641</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Exisiting" searchProperties="true" id="10061842-d0d7-46f6-ae95-2fecb27b00e6">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 1MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3Month Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate1Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3Month Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate3Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone1Month</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1Month</con:name>
<con:value>05/02/2015</con:value>
</con:property>
<con:property>
<con:name>startDate3Month</con:name>
<con:value>05/04/2015</con:value>
</con:property>
<con:property>
<con:name>endZone3Month</con:name>
<con:value>11</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="1Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>14480</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Monthly Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1423094400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1425427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37052</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get1MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get1MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#1Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone1Month}" ,
"startDate" : "${InitialInputs#startDate1Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="1Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get3MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get3MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#3Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone3Month}" ,
"startDate" : "${InitialInputs#startDate3Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="3Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>100690</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>3 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1428188400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1435964400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>3Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37381</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="3Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44657</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${1Month TravelCard#price},
         "name": "${1Month TravelCard#name}",
         "startDate": ${1Month TravelCard#startDate},
         "endDate": ${1Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${1Month TravelCard#startZone},
         "endZone": ${1Month TravelCard#endZone},
         "duration": "${1Month TravelCard#duration}",
         "productType": "${1Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${1Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${3Month TravelCard#price},
         "name": "${3Month TravelCard#name}",
         "startDate": ${3Month TravelCard#startDate},
         "endDate": ${3Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${3Month TravelCard#startZone},
         "endZone": ${3Month TravelCard#endZone},
         "duration": "${3Month TravelCard#duration}",
         "productType": "${3Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${3Month TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44661</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44662</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
def cardId = context.expand('${Card#id}')
if(json.cardId == cardId){
	assert true;
}

assert json.settlements != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterCheckout">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterCheckout" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json!= null
assert json.errorDescription == null
assert json.pendingItems != null
assert json.pendingItems.size()  >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get Outstanding Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get Outstanding Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer/2834/2837/outstanding</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.errors == null
assert json.name != null
assert json.id != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 5" searchProperties="true" id="b7ef5404-c36d-47d1-b14d-c46846ca2e78">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 4DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 4)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 7DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 7)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3MonthAnd8DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 8)
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 4DaysAhead</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 7DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3MonthAnd8DaysAhead</con:sourceStep>
<con:targetType>endDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>09/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>12/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>zone6</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>endDate1</con:name>
<con:value>13/04/2015</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3770</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420761600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421280000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37132</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate1}",
"endDate":"${InitialInputs#endDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>&lt;price null="true" xmlns="http://localhost/nemo-tfl-services/product/getTravelcard"/>
</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>3-4 months Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420761600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1428879600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>41479</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44672</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Exceeds Maximum Travelcards" searchProperties="true" id="27d0bf38-c957-44d0-ab53-09a1ecde7971">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 6MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 6)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1Year Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 6MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate6Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1Year Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDateAnnual</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone11</con:name>
<con:value>12</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate6Month</con:name>
<con:value>05/07/2015</con:value>
</con:property>
<con:property>
<con:name>startDateAnnual</con:name>
<con:value>05/01/2016</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="6Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>229020</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>6 Month Travelcard Zones 1 to 12</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1436050800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1451865600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>12</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37394</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get6MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get6MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#6Month}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone11}" ,
"startDate" : "${InitialInputs#startDate6Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="6Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDateAnnual}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>128400</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Annual Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1451952000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1483488000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>36961</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44673</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${6Month TravelCard#price},
         "name": "${6Month TravelCard#name}",
         "startDate": ${6Month TravelCard#startDate},
         "endDate": ${6Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${6Month TravelCard#startZone},
         "endZone": ${6Month TravelCard#endZone},
         "duration": "${6Month TravelCard#duration}",
         "productType": "${6Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${6Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${Annual TravelCard#price},
         "name": "${Annual TravelCard#name}",
         "startDate": ${Annual TravelCard#startDate},
         "endDate": ${Annual TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${Annual TravelCard#startZone},
         "endZone": ${Annual TravelCard#endZone},
         "duration": "${Annual TravelCard#duration}",
         "productType": "${Annual TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Annual TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "EXCEEDS_MAXIMUM_TRAVEL_CARDS_INCLUDING_PENDING_OR_EXISTING"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - PAYG Order Processing" searchProperties="true" id="d03b30e9-0b37-4994-8e6d-029d21de2b73">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44675</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44677</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44678</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${Inputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - Get Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - Get Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Inputs#fromDate}/${Inputs#toDate}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer//10/10/2014/9/10/2014</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.orders.size >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Get">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Get" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/customer/36283</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterCheckout">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterCheckout" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json!= null
assert json.errorDescription == null
assert json.pendingItems != null
assert json.pendingItems.size()  >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - PAYG Order Processing" searchProperties="true" id="d95bbb07-6a0d-4333-91b7-3c64d123ba40">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44684</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "PAY_AS_YOU_GO_CREDIT_GREATER_THAN_LIMIT"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - PAYG Order Processing - Purchase Limit Reached" searchProperties="true" id="c009d448-5057-40c4-8df6-0a18eb142eae">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44685</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": 5500,
   "name": " Pay as you go credit",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "Pay as you go",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "PAY_AS_YOU_GO_CREDIT_GREATER_THAN_PURCHASE_LIMIT"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>


<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Upgrade To Annual Ticket - No Concession End Date" searchProperties="true" id="7b9201b5-63ea-400c-a570-bc8097f00eed">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInpute Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44566</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>41792</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>106400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44686</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 2)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
def date = (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() >0
for(def item: json.cartItems){
	assert item.formattedEndDate == date
	assert item.name.contains('Annual')
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44688</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44689</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44688</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Exceeds Maximum Pending Items" searchProperties="true" id="ecb7e4e3-e37f-409d-9836-e27c3f8ba341">
<con:settings/>
<con:testStep type="groovy" name="GetDate - YesterdayDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)//(day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Today">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextWeek">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 8)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextMonth">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInputs Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>oysterNumber</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetOysterNumber</con:sourceStep>
<con:targetType>oysterNumber</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false">
<con:name>nextDayDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>tcDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false">
<con:name>nextWeekDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextWeek</con:sourceStep>
<con:targetType>tcDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferToAll="false">
<con:name>nextMonthDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextMonth</con:sourceStep>
<con:targetType>tcDate3</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - YesterdayDay</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Today</con:sourceStep>
<con:targetType>toDate</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>emailAddress</con:name>
<con:value>automatedTesting7317@gmail.com</con:value>
</con:property>
<con:property>
<con:name>tcDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>258456</con:value>
</con:property>
<con:property>
<con:name>oysterNumber</con:name>
<con:value>004933111707</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>10/09/2015</con:value>
</con:property>
<con:property>
<con:name>tcDate2</con:name>
<con:value>13/01/2015</con:value>
</con:property>
<con:property>
<con:name>tcDate3</con:name>
<con:value>06/02/2015</con:value>
</con:property>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${InitialInputs#oysterNumber}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>


<con:testStep type="groovy" name="GetEmailAddress">
<con:settings/>
<con:config>
<script>Random random = new Random()
def randUserAccount = "automatedTesting" 
def domain= "@gmail.com"
int max = 10000
randnum = random.nextInt(max+10000)
return randUserAccount += randnum + domain</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Email Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>emailAddress</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetEmailAddress</con:sourceStep>
<con:targetType>emailAddress</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer</con:endpoint>
<con:request>{
"title" :"Miss",
"firstName" :"Samantha Wanda",
"initials" :"S",
"lastName" :"Jones",
"houseNameNumber" :"38",
"street" :"Nightingale Gardens",
"town" : "Rugby",
"county" :"Warwickshire",
"country" :"GB",
"postcode" :"CV230WT",
"homePhone" :"01234567891",
"mobilePhone" :"01234567899",
"emailAddress" :"${InitialInputs#emailAddress}",
"username":"${InitialInputs#emailAddress}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/customer/nemo-tfl-services/</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.errors == null
assert json.id != null
assert json.username == context.expand('${InitialInputs#emailAddress}')</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion">
<con:configuration/>
</con:assertion>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Customer">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44704</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Customer Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>customerid</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Customer</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>testSuiteCustomerId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>customerid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}/${InitialInputs#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>testSuiteCardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>cardid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44707</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44744</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo - £5">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo - £5" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":500
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer - £5">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer - PAYG">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44737</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44738</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer - PAYG">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - PAYG</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - PAYG</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOrder - PAYG">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOrder - PAYG" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
def cardId = context.expand('${Card#id}')
if(json.cardId == cardId){
	assert true;
}

assert json.settlements != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3210</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Weekly Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1423180800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1423699200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37130</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard 2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard 2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC2</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC2">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC2</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC2</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard 3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard 3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate3}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC3</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC3">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC3</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC3</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo - £50">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo - £50" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":5000
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer - £50">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>

<con:testStep type="restrequest" name="Cart - Create - PAYG2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - PAYG2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer - PAYG2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - PAYG2</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - PAYG2">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - PAYG2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0

assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "EXCEEDS_MAXIMUM_PENDING_ITEMS"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>




<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${Customer#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>


<con:testStep type="restrequest" name="Order - Get Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - Get Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${Customer#id}/${InitialInputs#fromDate}/${InitialInputs#toDate}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer//10/10/2014/9/10/2014</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.orders.size >0

for(def order: json.orders){
	assert order != null
	assert order.items != null
	assert order.items.size > 0
	assert order.status == "Paid"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase><con:properties>
<con:property>
<con:name>customerid</con:name>
<con:value>44704</con:value>
</con:property>
<con:property>
<con:name>cardid</con:name>
<con:value>44707</con:value>
</con:property>
<con:property>
<con:name>stationId</con:name>
<con:value>589</con:value>
</con:property>
<con:property>
<con:name>oysterNumber</con:name>
<con:value>096810446867</con:value>
</con:property>
<con:property>
<con:name>passengerType</con:name>
<con:value>Adult</con:value>
</con:property>
<con:property>
<con:name>discountType</con:name>
<con:value>No Discount</con:value>
</con:property>
<con:property>
<con:name>7Day</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>1Month</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>3Month</con:name>
<con:value>3Month</con:value>
</con:property>
<con:property>
<con:name>6Month</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>Unknown</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>Annual</con:name>
<con:value>Annual</con:value>
</con:property>

</con:properties>
</con:testSuite>
<con:testSuite name="Automated Test - Adult - 18+">
<con:settings/>
<con:runType>SEQUENTIAL</con:runType>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Create" searchProperties="true" id="fa65da9e-725c-4827-abb6-8ee8cf138d39">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInputs Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>oysterNumber</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetOysterNumber</con:sourceStep>
<con:targetType>oysterNumber</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false">
<con:name>nextDayDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>dateString</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GetReferenceData">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="GetReferenceData" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/referenceData</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/product/referenceData</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.size() >0
def count = 0;
for(def item: json){
	if(item.name == "PassengerTypes" || item.name == "DiscountTypes"){
		count++;
		assert true;
	}
}
if(count &lt;2 || count>2)
{
	assert false;
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetEmailAddress">
<con:settings/>
<con:config>
<script>Random random = new Random()
def randUserAccount = "automatedTesting" 
def domain= "@gmail.com"
int max = 10000
randnum = random.nextInt(max+10000)
return randUserAccount += randnum + domain</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Email Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>emailAddress</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetEmailAddress</con:sourceStep>
<con:targetType>emailAddress</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer ReferenceData">
<con:settings/>
<con:config>
<script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["GetReferenceData"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


if(json != null &amp;&amp; json.size() >0){
	for(def item: json){
		if(item.name == "Duration"){
			for(def i : item.items){
				testRunner.testCase.testSuite.setPropertyValue(i.value, i.value)
			}
		}
		if(item.name == "DiscountTypes"){
			for(def dItem : item.items){
				if(dItem.text == "18+"){
				testRunner.testCase.testSuite.setPropertyValue('discountType', dItem.value)}
			}
			
		} 
		if(item.name == "PassengerTypes"){
			for(def pItem : item.items){
			if(pItem.text == "Adult"){
				testRunner.testCase.testSuite.setPropertyValue('passengerType', pItem.value)
			}
			}
		} 
		
		
	}
}
</script>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${#TestSuite#oysterNumber}",
"passengerType":"${#TestSuite#passengerType}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get All Active Stations">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get All Active Stations" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/station/stations</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/station/stations</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.size >0
for(def x: json){
	assert x.id != null
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer Station">
<con:settings/>
<con:config>
<script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["Station - Get All Active Stations"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


for(def station: json){
	if(station.name == context.expand('${InitialInputs#stationName}')){
		testRunner.testCase.testSuite.setPropertyValue('stationid',station.id.toString())
	}
}
</script>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>emailAddress</con:name>
<con:value>automatedTesting16773@gmail.com</con:value>
</con:property>
<con:property>
<con:name>dateString</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>3000</con:value>
</con:property>
<con:property>
<con:name>stationName</con:name>
<con:value>Greenford</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>258456</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer</con:endpoint>
<con:request>{
"title" :"Miss",
"firstName" :"Samantha Wanda",
"initials" :"S",
"lastName" :"Jones",
"houseNameNumber" :"38",
"street" :"Nightingale Gardens",
"town" : "Rugby",
"county" :"Warwickshire",
"country" :"GB",
"postcode" :"CV230WT",
"homePhone" :"01234567891",
"mobilePhone" :"01234567899",
"emailAddress" :"${InitialInputs#emailAddress}",
"username":"${InitialInputs#emailAddress}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/customer/nemo-tfl-services/</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.errors == null
assert json.id != null
assert json.username == context.expand('${InitialInputs#emailAddress}')</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion">
<con:configuration/>
</con:assertion>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Customer">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44751</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Customer Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>customerid</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Customer</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>testSuiteCustomerId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>customerid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>testSuiteCardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>cardid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44755</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${InitialInputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37978</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#dateString}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   },
   {
         "errors": null,
         "price": ${7Day TravelCard#price},
         "name": "${7Day TravelCard#name}",
         "startDate": ${7Day TravelCard#startDate},
         "endDate": ${7Day TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard#startZone},
         "endZone": ${7Day TravelCard#endZone},
         "duration": "${7Day TravelCard#duration}",
         "productType": "${7Day TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - GetCart">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - GetCart" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36312</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent;
def json = new JsonSlurper().parseText res

assert json != null
assert json.id != null
assert json.errors == null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44759</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44760</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${Customer#id}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44759</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${Customer#id}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get Outstanding Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get Outstanding Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${Customer#id}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer/2834/2837/outstanding</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.errors == null
assert json.name == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones" searchProperties="true" id="03ced11a-4260-4dfd-b3ed-9e67ed747a9f">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 5DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 5)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 5DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>10/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37978</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1680</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 2 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421366400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37956</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44775</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 2" searchProperties="true" id="6c04edee-ce93-4019-a30f-e0051dfffa97">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 5DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 5)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 5DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>10/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1680</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 2 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37956</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421366400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37978</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44777</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 3" searchProperties="true" id="8573b052-9523-40dd-a3d7-2fbc91361ea8">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>08/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2230</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 2 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone5}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420675200000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421193600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37978</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44779</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 4" searchProperties="true" id="49d93b80-66a4-4423-a106-bcf963acb23d">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1MonthAnd3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 4)
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1MonthAnd3DaysAhead</con:sourceStep>
<con:targetType>endDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>08/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>zone6</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>endDate1</con:name>
<con:value>09/02/2015</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2630</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37976</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1680</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420675200000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421193600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37914</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate1}",
"endDate":"${InitialInputs#endDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>&lt;price null="true" xmlns="http://localhost/nemo-tfl-services/product/getTravelcard"/>
</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>1-2 months Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1423440000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37425</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44781</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
      ,
      {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Travelcard Order Processing" searchProperties="true" id="91d4aa8f-fe1f-4677-b162-578b1fc7a4ad">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 6MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 6)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1Year Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 6MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate6Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1Year Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDateAnnual</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone11</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate6Month</con:name>
<con:value>05/07/2015</con:value>
</con:property>
<con:property>
<con:name>startDateAnnual</con:name>
<con:value>05/01/2016</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="6Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>140780</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>6 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1436050800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1451865600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>38240</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get6MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get6MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#6Month}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone11}" ,
"startDate" : "${InitialInputs#startDate6Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="6Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDateAnnual}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>89600</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Annual Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1451952000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1483488000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>38322</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44785</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${6Month TravelCard#price},
         "name": "${6Month TravelCard#name}",
         "startDate": ${6Month TravelCard#startDate},
         "endDate": ${6Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${6Month TravelCard#startZone},
         "endZone": ${6Month TravelCard#endZone},
         "duration": "${6Month TravelCard#duration}",
         "productType": "${6Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${6Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${Annual TravelCard#price},
         "name": "${Annual TravelCard#name}",
         "startDate": ${Annual TravelCard#startDate},
         "endDate": ${Annual TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${Annual TravelCard#startZone},
         "endZone": ${Annual TravelCard#endZone},
         "duration": "${Annual TravelCard#duration}",
         "productType": "${Annual TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Annual TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44789</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44790</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOutstandingOrders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOutstandingOrders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
assert json.id != null
assert json.name != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44789</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Exisiting" searchProperties="true" id="b76d97be-d328-4075-b388-40fbcaee16dc">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 1MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3Month Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate1Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3Month Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate3Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone1Month</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1Month</con:name>
<con:value>05/02/2015</con:value>
</con:property>
<con:property>
<con:name>startDate3Month</con:name>
<con:value>05/04/2015</con:value>
</con:property>
<con:property>
<con:name>endZone3Month</con:name>
<con:value>11</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="1Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>10100</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Monthly Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1423094400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1425427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>38062</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get1MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get1MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#1Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone1Month}" ,
"startDate" : "${InitialInputs#startDate1Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="1Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get3MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get3MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#3Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone3Month}" ,
"startDate" : "${InitialInputs#startDate3Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="3Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>70390</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>3 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1428188400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1435964400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>3Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>38154</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="3Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44805</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${1Month TravelCard#price},
         "name": "${1Month TravelCard#name}",
         "startDate": ${1Month TravelCard#startDate},
         "endDate": ${1Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${1Month TravelCard#startZone},
         "endZone": ${1Month TravelCard#endZone},
         "duration": "${1Month TravelCard#duration}",
         "productType": "${1Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${1Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${3Month TravelCard#price},
         "name": "${3Month TravelCard#name}",
         "startDate": ${3Month TravelCard#startDate},
         "endDate": ${3Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${3Month TravelCard#startZone},
         "endZone": ${3Month TravelCard#endZone},
         "duration": "${3Month TravelCard#duration}",
         "productType": "${3Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${3Month TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44809</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44810</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
def cardId = context.expand('${Card#id}')
if(json.cardId == cardId){
	assert true;
}

assert json.settlements != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterCheckout">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterCheckout" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json!= null
assert json.errorDescription == null
assert json.pendingItems != null
assert json.pendingItems.size()  >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get Outstanding Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get Outstanding Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer/2834/2837/outstanding</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.errors == null
assert json.name != null
assert json.id != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 5" searchProperties="true" id="e8fb4ca3-071d-4465-b150-4caec023d2cc">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 4DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 4)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 7DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 7)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3MonthAnd8DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 8)
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 4DaysAhead</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 7DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3MonthAnd8DaysAhead</con:sourceStep>
<con:targetType>endDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>09/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>12/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>zone6</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>endDate1</con:name>
<con:value>13/04/2015</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2630</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420761600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421280000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37976</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate1}",
"endDate":"${InitialInputs#endDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>&lt;price null="true" xmlns="http://localhost/nemo-tfl-services/product/getTravelcard"/>
</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>3-4 months Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420761600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1428879600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37512</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44820</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Exceeds Maximum Travelcards" searchProperties="true" id="060407cb-f0fb-4875-86e2-8f4bf07639f0">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 6MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 6)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1Year Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 6MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate6Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1Year Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDateAnnual</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone11</con:name>
<con:value>12</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate6Month</con:name>
<con:value>05/07/2015</con:value>
</con:property>
<con:property>
<con:name>startDateAnnual</con:name>
<con:value>05/01/2016</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="6Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>160130</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>6 Month Travelcard Zones 1 to 12</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1436050800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1451865600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>12</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>38238</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get6MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get6MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#6Month}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone11}" ,
"startDate" : "${InitialInputs#startDate6Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="6Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDateAnnual}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>89600</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Annual Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1451952000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1483488000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>38322</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44821</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${6Month TravelCard#price},
         "name": "${6Month TravelCard#name}",
         "startDate": ${6Month TravelCard#startDate},
         "endDate": ${6Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${6Month TravelCard#startZone},
         "endZone": ${6Month TravelCard#endZone},
         "duration": "${6Month TravelCard#duration}",
         "productType": "${6Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${6Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${Annual TravelCard#price},
         "name": "${Annual TravelCard#name}",
         "startDate": ${Annual TravelCard#startDate},
         "endDate": ${Annual TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${Annual TravelCard#startZone},
         "endZone": ${Annual TravelCard#endZone},
         "duration": "${Annual TravelCard#duration}",
         "productType": "${Annual TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Annual TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "EXCEEDS_MAXIMUM_TRAVEL_CARDS_INCLUDING_PENDING_OR_EXISTING"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Cancel Order" searchProperties="true" id="5637e144-5108-479c-b197-7e2447a59b92">
<con:settings/>
<con:testStep type="groovy" name="GetDate - StartDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10)
{
	day = "0"+day;
}

def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month &lt;10){
	month = "0"+month
}
return(day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - StartDate</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate</con:name>
<con:value>04/01/2015</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>1500</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1500</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${Inputs#startZone}",  
"endZone": "${Inputs#endZone}" ,
"startDate" : "${Inputs#startDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420329600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37978</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44823</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   },      
   {
         "errors": null,
         "price": ${7Day TravelCard#price},
         "name": "${7Day TravelCard#name}",
         "startDate": ${7Day TravelCard#startDate},
         "endDate": ${7Day TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard#startZone},
         "endZone": ${7Day TravelCard#endZone},
         "duration": "${7Day TravelCard#duration}",
         "productType": "${7Day TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - GetCart">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - GetCart" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36312</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent;
def json = new JsonSlurper().parseText res

assert json != null
assert json.id != null
assert json.errors == null
assert json.cartItems.size() ==1
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44827</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44828</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${Inputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Get">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Get" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/customer/36283</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44827</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - PAYG Order Processing" searchProperties="true" id="89b96c56-0fd7-4340-85c0-6ea2c75908ca">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44837</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44839</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44840</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${Inputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - Get Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - Get Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Inputs#fromDate}/${Inputs#toDate}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer//10/10/2014/9/10/2014</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.orders.size >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Get">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Get" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/customer/36283</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterCheckout">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterCheckout" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json!= null
assert json.errorDescription == null
assert json.pendingItems != null
assert json.pendingItems.size()  >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - PAYG Order Processing" searchProperties="true" id="5954a1d0-3535-489b-a635-123539c2e29f">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44846</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "PAY_AS_YOU_GO_CREDIT_GREATER_THAN_LIMIT"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - PAYG Order Processing - Purchase Limit Reached" searchProperties="true" id="daed4a21-4ff7-4caf-bc7c-b2e17806b320">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44847</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": 5500,
   "name": " Pay as you go credit",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "Pay as you go",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "PAY_AS_YOU_GO_CREDIT_GREATER_THAN_PURCHASE_LIMIT"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Annual Ticket - No Concession End Date" searchProperties="true" id="fd529b85-ce25-4e11-a3f8-953337ae08f2">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInpute Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37831</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>






<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44848</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 2)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
def date = (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() >0
for(def item: json.cartItems){
	assert item.formattedEndDate == date
	assert item.name.contains('Annual')
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44850</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44851</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44850</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Odd Period - End Date After Concession End Date" searchProperties="true" id="c4ac75aa-0ce6-48cf-b13b-e7a096cafca3">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd7DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 7)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInput Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd7DaysAheadAndYear</con:sourceStep>
<con:targetType>concessionEndDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>12/11/2016</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37831</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44860</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${InitInputs#concessionEndDate}')
	assert item.duration == 'Unknown'
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44862</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44863</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44862</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Odd Period - End Date Before Concession End Date" searchProperties="true" id="5c092f2f-1da3-45f8-b5eb-27d15c3bc360">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd17DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 17)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInput Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd17DaysAheadAndYear</con:sourceStep>
<con:targetType>concessionEndDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>22/11/2016</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37831</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44872</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${InitInputs#concessionEndDate}')
	assert item.duration == 'Unknown'
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44874</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44875</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44874</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Annual Ticket - Concession End Date After Annual Date" searchProperties="true" id="40c7ae66-166a-43d6-9786-3853b8f0ed81">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInpute Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44754</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37831</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44884</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 2)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
def date = (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() >0
for(def item: json.cartItems){
	assert item.formattedEndDate == date
	assert item.name.contains('Annual')
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44886</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44887</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44886</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Exceeds Maximum Pending Items" searchProperties="true" id="8fa3b686-d0f1-4f7c-8798-ff1969f6f5c0">
<con:settings/>
<con:testStep type="groovy" name="GetDate - YesterdayDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)//(day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Today">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextWeek">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 8)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextMonth">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInputs Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>oysterNumber</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetOysterNumber</con:sourceStep>
<con:targetType>oysterNumber</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false">
<con:name>nextDayDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>tcDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false">
<con:name>nextWeekDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextWeek</con:sourceStep>
<con:targetType>tcDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferToAll="false">
<con:name>nextMonthDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextMonth</con:sourceStep>
<con:targetType>tcDate3</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - YesterdayDay</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Today</con:sourceStep>
<con:targetType>toDate</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>emailAddress</con:name>
<con:value>automatedTesting4823@gmail.com</con:value>
</con:property>
<con:property>
<con:name>tcDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>258456</con:value>
</con:property>
<con:property>
<con:name>oysterNumber</con:name>
<con:value>067758267858</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>10/09/2015</con:value>
</con:property>
<con:property>
<con:name>tcDate2</con:name>
<con:value>13/01/2015</con:value>
</con:property>
<con:property>
<con:name>tcDate3</con:name>
<con:value>06/02/2015</con:value>
</con:property>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${InitialInputs#oysterNumber}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>


<con:testStep type="groovy" name="GetEmailAddress">
<con:settings/>
<con:config>
<script>Random random = new Random()
def randUserAccount = "automatedTesting" 
def domain= "@gmail.com"
int max = 10000
randnum = random.nextInt(max+10000)
return randUserAccount += randnum + domain</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Email Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>emailAddress</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetEmailAddress</con:sourceStep>
<con:targetType>emailAddress</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer</con:endpoint>
<con:request>{
"title" :"Miss",
"firstName" :"Samantha Wanda",
"initials" :"S",
"lastName" :"Jones",
"houseNameNumber" :"38",
"street" :"Nightingale Gardens",
"town" : "Rugby",
"county" :"Warwickshire",
"country" :"GB",
"postcode" :"CV230WT",
"homePhone" :"01234567891",
"mobilePhone" :"01234567899",
"emailAddress" :"${InitialInputs#emailAddress}",
"username":"${InitialInputs#emailAddress}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/customer/nemo-tfl-services/</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.errors == null
assert json.id != null
assert json.username == context.expand('${InitialInputs#emailAddress}')</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion">
<con:configuration/>
</con:assertion>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Customer">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44902</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Customer Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>customerid</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Customer</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>testSuiteCustomerId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>customerid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}/${InitialInputs#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>testSuiteCardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>cardid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44905</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44942</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo - £5">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo - £5" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":500
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer - £5">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer - PAYG">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44935</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44936</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer - PAYG">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - PAYG</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - PAYG</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOrder - PAYG">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOrder - PAYG" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
def cardId = context.expand('${Card#id}')
if(json.cardId == cardId){
	assert true;
}

assert json.settlements != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1423180800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1423699200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37978</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard 2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard 2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC2</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC2">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC2</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC2</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard 3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard 3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate3}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC3</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC3">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC3</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC3</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo - £50">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo - £50" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":5000
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer - £50">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>

<con:testStep type="restrequest" name="Cart - Create - PAYG2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - PAYG2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer - PAYG2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - PAYG2</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - PAYG2">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - PAYG2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0

assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "EXCEEDS_MAXIMUM_PENDING_ITEMS"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>




<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${Customer#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>


<con:testStep type="restrequest" name="Order - Get Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - Get Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${Customer#id}/${InitialInputs#fromDate}/${InitialInputs#toDate}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer//10/10/2014/9/10/2014</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.orders.size >0

for(def order: json.orders){
	assert order != null
	assert order.items != null
	assert order.items.size > 0
	assert order.status == "Paid"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:properties>
<con:property>
<con:name>customerid</con:name>
<con:value>44902</con:value>
</con:property>
<con:property>
<con:name>cardid</con:name>
<con:value>44905</con:value>
</con:property>
<con:property>
<con:name>stationId</con:name>
<con:value>589</con:value>
</con:property>
<con:property>
<con:name>oysterNumber</con:name>
<con:value>013685950489</con:value>
</con:property>
<con:property>
<con:name>passengerType</con:name>
<con:value>Adult</con:value>
</con:property>
<con:property>
<con:name>discountType</con:name>
<con:value>18+</con:value>
</con:property>
<con:property>
<con:name>7Day</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>1Month</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>3Month</con:name>
<con:value>3Month</con:value>
</con:property>
<con:property>
<con:name>6Month</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>Unknown</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>Annual</con:name>
<con:value>Annual</con:value>
</con:property>

</con:properties>
</con:testSuite>
<con:testSuite name="Automated Test - Adult - Apprentice">
<con:settings/>
<con:runType>SEQUENTIAL</con:runType>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Create" searchProperties="true" id="f92a0e5c-d783-4f41-8c95-b0828d60dc7b">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInputs Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>oysterNumber</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetOysterNumber</con:sourceStep>
<con:targetType>oysterNumber</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false">
<con:name>nextDayDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>dateString</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GetReferenceData">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="GetReferenceData" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/referenceData</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/product/referenceData</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.size() >0
def count = 0;
for(def item: json){
	if(item.name == "PassengerTypes" || item.name == "DiscountTypes"){
		count++;
		assert true;
	}
}
if(count &lt;2 || count>2)
{
	assert false;
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetEmailAddress">
<con:settings/>
<con:config>
<script>Random random = new Random()
def randUserAccount = "automatedTesting" 
def domain= "@gmail.com"
int max = 10000
randnum = random.nextInt(max+10000)
return randUserAccount += randnum + domain</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Email Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>emailAddress</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetEmailAddress</con:sourceStep>
<con:targetType>emailAddress</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer ReferenceData">
<con:settings/>
<con:config><script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["GetReferenceData"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


if(json != null &amp;&amp; json.size() >0){
	for(def item: json){
		if(item.name == "Duration"){
			for(def i : item.items){
				testRunner.testCase.testSuite.setPropertyValue(i.value, i.value)
			}
		}
		if(item.name == "DiscountTypes"){
			for(def dItem : item.items){
				if(dItem.text == "Apprentice"){
				testRunner.testCase.testSuite.setPropertyValue('discountType', dItem.value)}
			}
			
		} 
		if(item.name == "PassengerTypes"){
			for(def pItem : item.items){
			if(pItem.text == "Adult"){
				testRunner.testCase.testSuite.setPropertyValue('passengerType', pItem.value)
			}
			}
		} 
		
		
	}
}
</script></con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${#TestSuite#oysterNumber}",
"passengerType":"${#TestSuite#passengerType}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get All Active Stations">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get All Active Stations" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/station/stations</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/station/stations</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.size >0
for(def x: json){
	assert x.id != null
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer Station">
<con:settings/>
<con:config>
<script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["Station - Get All Active Stations"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


for(def station: json){
	if(station.name == context.expand('${InitialInputs#stationName}')){
		testRunner.testCase.testSuite.setPropertyValue('stationid',station.id.toString())
	}
}
</script>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>emailAddress</con:name>
<con:value>automatedTesting15465@gmail.com</con:value>
</con:property>
<con:property>
<con:name>dateString</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>3000</con:value>
</con:property>
<con:property>
<con:name>stationName</con:name>
<con:value>Greenford</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>258456</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer</con:endpoint>
<con:request>{
"title" :"Miss",
"firstName" :"Samantha Wanda",
"initials" :"S",
"lastName" :"Jones",
"houseNameNumber" :"38",
"street" :"Nightingale Gardens",
"town" : "Rugby",
"county" :"Warwickshire",
"country" :"GB",
"postcode" :"CV230WT",
"homePhone" :"01234567891",
"mobilePhone" :"01234567899",
"emailAddress" :"${InitialInputs#emailAddress}",
"username":"${InitialInputs#emailAddress}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/customer/nemo-tfl-services/</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.errors == null
assert json.id != null
assert json.username == context.expand('${InitialInputs#emailAddress}')</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion">
<con:configuration/>
</con:assertion>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Customer">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44949</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Customer Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>customerid</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Customer</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>testSuiteCustomerId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>customerid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>testSuiteCardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>cardid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44953</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${InitialInputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40690</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#dateString}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   },
   {
         "errors": null,
         "price": ${7Day TravelCard#price},
         "name": "${7Day TravelCard#name}",
         "startDate": ${7Day TravelCard#startDate},
         "endDate": ${7Day TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard#startZone},
         "endZone": ${7Day TravelCard#endZone},
         "duration": "${7Day TravelCard#duration}",
         "productType": "${7Day TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - GetCart">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - GetCart" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36312</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent;
def json = new JsonSlurper().parseText res

assert json != null
assert json.id != null
assert json.errors == null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44957</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44958</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${Customer#id}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44957</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${Customer#id}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get Outstanding Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get Outstanding Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${Customer#id}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer/2834/2837/outstanding</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.errors == null
assert json.name == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones" searchProperties="true" id="930a1720-b110-478d-bb0f-cf3fc527732c">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 5DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 5)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 5DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>10/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40690</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1680</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 2 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421366400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40668</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44973</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 2" searchProperties="true" id="5daf41e7-ff35-4faf-aa24-5e4729ad2630">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 5DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 5)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 5DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>10/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1680</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 2 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40668</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421366400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40690</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44975</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 3" searchProperties="true" id="7c89d3ee-c675-40ff-ac64-f55ba1fa50be">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>08/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2230</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 2 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40664</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone5}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420675200000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421193600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40690</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44977</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 4" searchProperties="true" id="f4f140c6-ef40-4f15-bc9a-1feebb2ac728">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1MonthAnd3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 4)
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1MonthAnd3DaysAhead</con:sourceStep>
<con:targetType>endDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>08/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>zone6</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>endDate1</con:name>
<con:value>09/02/2015</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2630</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40688</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1680</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420675200000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421193600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40626</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate1}",
"endDate":"${InitialInputs#endDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>&lt;price null="true" xmlns="http://localhost/nemo-tfl-services/product/getTravelcard"/>
</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>1-2 months Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1423440000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40145</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44979</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
      ,
      {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Travelcard Order Processing" searchProperties="true" id="2546c439-0812-42c1-876e-f6a2053aaea6">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 6MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 6)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1Year Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 6MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate6Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1Year Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDateAnnual</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone11</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate6Month</con:name>
<con:value>05/07/2015</con:value>
</con:property>
<con:property>
<con:name>startDateAnnual</con:name>
<con:value>05/01/2016</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="6Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>140780</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>6 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1436050800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1451865600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get6MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get6MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#6Month}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone11}" ,
"startDate" : "${InitialInputs#startDate6Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="6Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDateAnnual}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>89600</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Annual Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1451952000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1483488000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>41034</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44983</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${6Month TravelCard#price},
         "name": "${6Month TravelCard#name}",
         "startDate": ${6Month TravelCard#startDate},
         "endDate": ${6Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${6Month TravelCard#startZone},
         "endZone": ${6Month TravelCard#endZone},
         "duration": "${6Month TravelCard#duration}",
         "productType": "${6Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${6Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${Annual TravelCard#price},
         "name": "${Annual TravelCard#name}",
         "startDate": ${Annual TravelCard#startDate},
         "endDate": ${Annual TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${Annual TravelCard#startZone},
         "endZone": ${Annual TravelCard#endZone},
         "duration": "${Annual TravelCard#duration}",
         "productType": "${Annual TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Annual TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>44987</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>44988</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOutstandingOrders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOutstandingOrders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
assert json.id != null
assert json.name != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44987</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Exisiting" searchProperties="true" id="72c06963-82ae-43c7-9a98-c4010d828b34">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 1MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3Month Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate1Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3Month Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate3Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone1Month</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1Month</con:name>
<con:value>05/02/2015</con:value>
</con:property>
<con:property>
<con:name>startDate3Month</con:name>
<con:value>05/04/2015</con:value>
</con:property>
<con:property>
<con:name>endZone3Month</con:name>
<con:value>11</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="1Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>10100</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Monthly Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1423094400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1425427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40774</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get1MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get1MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#1Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone1Month}" ,
"startDate" : "${InitialInputs#startDate1Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="1Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get3MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get3MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#3Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone3Month}" ,
"startDate" : "${InitialInputs#startDate3Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="3Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>70390</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>3 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1428188400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1435964400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>3Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40866</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="3Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45003</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${1Month TravelCard#price},
         "name": "${1Month TravelCard#name}",
         "startDate": ${1Month TravelCard#startDate},
         "endDate": ${1Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${1Month TravelCard#startZone},
         "endZone": ${1Month TravelCard#endZone},
         "duration": "${1Month TravelCard#duration}",
         "productType": "${1Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${1Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${3Month TravelCard#price},
         "name": "${3Month TravelCard#name}",
         "startDate": ${3Month TravelCard#startDate},
         "endDate": ${3Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${3Month TravelCard#startZone},
         "endZone": ${3Month TravelCard#endZone},
         "duration": "${3Month TravelCard#duration}",
         "productType": "${3Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${3Month TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45007</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45008</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
def cardId = context.expand('${Card#id}')
if(json.cardId == cardId){
	assert true;
}

assert json.settlements != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterCheckout">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterCheckout" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json!= null
assert json.errorDescription == null
assert json.pendingItems != null
assert json.pendingItems.size()  >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get Outstanding Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get Outstanding Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer/2834/2837/outstanding</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.errors == null
assert json.name != null
assert json.id != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 5" searchProperties="true" id="70c5fbe4-2afd-4125-b8f0-aaec5de55422">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 4DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 4)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 7DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 7)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3MonthAnd8DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 8)
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 4DaysAhead</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 7DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3MonthAnd8DaysAhead</con:sourceStep>
<con:targetType>endDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>09/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>12/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>zone6</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>endDate1</con:name>
<con:value>13/04/2015</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2630</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420761600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421280000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40688</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate1}",
"endDate":"${InitialInputs#endDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>&lt;price null="true" xmlns="http://localhost/nemo-tfl-services/product/getTravelcard"/>
</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>3-4 months Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420761600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1428879600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40231</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45018</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Exceeds Maximum Travelcards" searchProperties="true" id="4e6c0167-3c9d-4dc6-b4ef-625aae0445bd">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 6MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 6)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1Year Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 6MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate6Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1Year Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDateAnnual</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone11</con:name>
<con:value>12</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate6Month</con:name>
<con:value>05/07/2015</con:value>
</con:property>
<con:property>
<con:name>startDateAnnual</con:name>
<con:value>05/01/2016</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="6Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>160130</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>6 Month Travelcard Zones 1 to 12</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1436050800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1451865600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>12</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40950</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get6MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get6MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#6Month}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone11}" ,
"startDate" : "${InitialInputs#startDate6Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="6Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDateAnnual}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>89600</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Annual Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1451952000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1483488000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>41034</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45019</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${6Month TravelCard#price},
         "name": "${6Month TravelCard#name}",
         "startDate": ${6Month TravelCard#startDate},
         "endDate": ${6Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${6Month TravelCard#startZone},
         "endZone": ${6Month TravelCard#endZone},
         "duration": "${6Month TravelCard#duration}",
         "productType": "${6Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${6Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${Annual TravelCard#price},
         "name": "${Annual TravelCard#name}",
         "startDate": ${Annual TravelCard#startDate},
         "endDate": ${Annual TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${Annual TravelCard#startZone},
         "endZone": ${Annual TravelCard#endZone},
         "duration": "${Annual TravelCard#duration}",
         "productType": "${Annual TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Annual TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "EXCEEDS_MAXIMUM_TRAVEL_CARDS_INCLUDING_PENDING_OR_EXISTING"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Cancel Order" searchProperties="true" id="9284cf3f-9f67-4411-a611-e9b8a98a9b48">
<con:settings/>
<con:testStep type="groovy" name="GetDate - StartDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10)
{
	day = "0"+day;
}

def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month &lt;10){
	month = "0"+month
}
return(day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - StartDate</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate</con:name>
<con:value>04/01/2015</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>1500</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1500</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${Inputs#startZone}",  
"endZone": "${Inputs#endZone}" ,
"startDate" : "${Inputs#startDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420329600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40690</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45021</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   },      
   {
         "errors": null,
         "price": ${7Day TravelCard#price},
         "name": "${7Day TravelCard#name}",
         "startDate": ${7Day TravelCard#startDate},
         "endDate": ${7Day TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard#startZone},
         "endZone": ${7Day TravelCard#endZone},
         "duration": "${7Day TravelCard#duration}",
         "productType": "${7Day TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - GetCart">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - GetCart" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36312</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent;
def json = new JsonSlurper().parseText res

assert json != null
assert json.id != null
assert json.errors == null
assert json.cartItems.size() ==1
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45025</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45026</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${Inputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Get">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Get" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/customer/36283</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45025</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - PAYG Order Processing" searchProperties="true" id="ffe6cab1-296d-4142-b8ca-a8bcec66f152">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45035</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45037</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45038</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${Inputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - Get Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - Get Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Inputs#fromDate}/${Inputs#toDate}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer//10/10/2014/9/10/2014</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.orders.size >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Get">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Get" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/customer/36283</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterCheckout">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterCheckout" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json!= null
assert json.errorDescription == null
assert json.pendingItems != null
assert json.pendingItems.size()  >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - PAYG Order Processing" searchProperties="true" id="e951738c-b79c-4481-ac56-35bd33c96143">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45044</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "PAY_AS_YOU_GO_CREDIT_GREATER_THAN_LIMIT"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - PAYG Order Processing - Purchase Limit Reached" searchProperties="true" id="e26f4878-b088-432d-beb7-e28de9435825">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45045</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": 5500,
   "name": " Pay as you go credit",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "Pay as you go",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "PAY_AS_YOU_GO_CREDIT_GREATER_THAN_PURCHASE_LIMIT"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Annual Ticket - No Concession End Date" searchProperties="true" id="087e76d5-8c5f-4807-95ed-f5c26dff31b7">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInpute Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40544</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>






<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45046</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 2)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
def date = (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() >0
for(def item: json.cartItems){
	assert item.formattedEndDate == date
	assert item.name.contains('Annual')
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45048</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45049</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45048</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Odd Period - End Date After Concession End Date" searchProperties="true" id="4f1205b3-a6c8-4d98-9eef-2dea8e771e55">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd7DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 7)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInput Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd7DaysAheadAndYear</con:sourceStep>
<con:targetType>concessionEndDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>12/11/2016</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40544</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45058</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${InitInputs#concessionEndDate}')
	assert item.duration == 'Unknown'
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45060</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45061</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45060</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Odd Period - End Date Before Concession End Date" searchProperties="true" id="da74f8bb-acfd-448b-b85f-2bb28ff6ca9a">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd17DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 17)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInput Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd17DaysAheadAndYear</con:sourceStep>
<con:targetType>concessionEndDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>22/11/2016</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40544</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45070</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${InitInputs#concessionEndDate}')
	assert item.duration == 'Unknown'
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45072</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45073</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45072</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Annual Ticket - Concession End Date After Annual Date" searchProperties="true" id="e22a72b9-08ec-4a8e-bc3c-02630d1f2072">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInpute Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>44952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40544</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45082</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 2)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
def date = (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() >0
for(def item: json.cartItems){
	assert item.formattedEndDate == date
	assert item.name.contains('Annual')
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45084</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45085</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45084</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Exceeds Maximum Pending Items" searchProperties="true" id="1e34176a-a5d0-4138-a14a-2de0f31b8599">
<con:settings/>
<con:testStep type="groovy" name="GetDate - YesterdayDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)//(day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Today">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextWeek">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 8)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextMonth">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInputs Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>oysterNumber</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetOysterNumber</con:sourceStep>
<con:targetType>oysterNumber</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false">
<con:name>nextDayDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>tcDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false">
<con:name>nextWeekDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextWeek</con:sourceStep>
<con:targetType>tcDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferToAll="false">
<con:name>nextMonthDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextMonth</con:sourceStep>
<con:targetType>tcDate3</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - YesterdayDay</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Today</con:sourceStep>
<con:targetType>toDate</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>emailAddress</con:name>
<con:value>automatedTesting19406@gmail.com</con:value>
</con:property>
<con:property>
<con:name>tcDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>258456</con:value>
</con:property>
<con:property>
<con:name>oysterNumber</con:name>
<con:value>011761865074</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>10/09/2015</con:value>
</con:property>
<con:property>
<con:name>tcDate2</con:name>
<con:value>13/01/2015</con:value>
</con:property>
<con:property>
<con:name>tcDate3</con:name>
<con:value>06/02/2015</con:value>
</con:property>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${InitialInputs#oysterNumber}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>


<con:testStep type="groovy" name="GetEmailAddress">
<con:settings/>
<con:config>
<script>Random random = new Random()
def randUserAccount = "automatedTesting" 
def domain= "@gmail.com"
int max = 10000
randnum = random.nextInt(max+10000)
return randUserAccount += randnum + domain</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Email Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>emailAddress</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetEmailAddress</con:sourceStep>
<con:targetType>emailAddress</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer</con:endpoint>
<con:request>{
"title" :"Miss",
"firstName" :"Samantha Wanda",
"initials" :"S",
"lastName" :"Jones",
"houseNameNumber" :"38",
"street" :"Nightingale Gardens",
"town" : "Rugby",
"county" :"Warwickshire",
"country" :"GB",
"postcode" :"CV230WT",
"homePhone" :"01234567891",
"mobilePhone" :"01234567899",
"emailAddress" :"${InitialInputs#emailAddress}",
"username":"${InitialInputs#emailAddress}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/customer/nemo-tfl-services/</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.errors == null
assert json.id != null
assert json.username == context.expand('${InitialInputs#emailAddress}')</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion">
<con:configuration/>
</con:assertion>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Customer">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45100</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Customer Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>customerid</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Customer</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>testSuiteCustomerId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>customerid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}/${InitialInputs#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>testSuiteCardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>cardid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45103</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45140</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo - £5">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo - £5" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":500
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer - £5">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer - PAYG">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45133</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45134</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer - PAYG">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - PAYG</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - PAYG</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOrder - PAYG">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOrder - PAYG" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
def cardId = context.expand('${Card#id}')
if(json.cardId == cardId){
	assert true;
}

assert json.settlements != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1423180800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1423699200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40690</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard 2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard 2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC2</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC2">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC2</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC2</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard 3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard 3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate3}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC3</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC3">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC3</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC3</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo - £50">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo - £50" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":5000
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer - £50">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>

<con:testStep type="restrequest" name="Cart - Create - PAYG2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - PAYG2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer - PAYG2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - PAYG2</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - PAYG2">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - PAYG2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0

assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "EXCEEDS_MAXIMUM_PENDING_ITEMS"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>




<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${Customer#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>


<con:testStep type="restrequest" name="Order - Get Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - Get Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${Customer#id}/${InitialInputs#fromDate}/${InitialInputs#toDate}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer//10/10/2014/9/10/2014</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.orders.size >0

for(def order: json.orders){
	assert order != null
	assert order.items != null
	assert order.items.size > 0
	assert order.status == "Paid"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:properties>
<con:property>
<con:name>customerid</con:name>
<con:value>45100</con:value>
</con:property>
<con:property>
<con:name>cardid</con:name>
<con:value>45103</con:value>
</con:property>
<con:property>
<con:name>stationId</con:name>
<con:value>589</con:value>
</con:property>
<con:property>
<con:name>oysterNumber</con:name>
<con:value>053353622100</con:value>
</con:property>
<con:property>
<con:name>passengerType</con:name>
<con:value>Adult</con:value>
</con:property>
<con:property>
<con:name>discountType</con:name>
<con:value>Apprentice</con:value>
</con:property>
<con:property>
<con:name>7Day</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>1Month</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>3Month</con:name>
<con:value>3Month</con:value>
</con:property>
<con:property>
<con:name>6Month</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>Unknown</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>Annual</con:name>
<con:value>Annual</con:value>
</con:property>

</con:properties>
</con:testSuite><con:testSuite name="Automated Test - Child - No Discount - One Card">
<con:settings/>
<con:runType>SEQUENTIAL</con:runType>


<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Create" searchProperties="true" id="f225cd14-bdb7-4745-98c2-a6a1f55b5f89">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInputs Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>oysterNumber</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetOysterNumber</con:sourceStep>
<con:targetType>oysterNumber</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false">
<con:name>nextDayDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>dateString</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${#TestSuite#oysterNumber}",
"passengerType":"${#TestSuite#passengerType}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GetReferenceData">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="GetReferenceData" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/referenceData</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/product/referenceData</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.size() >0
def count = 0;
for(def item: json){
	if(item.name == "PassengerTypes" || item.name == "DiscountTypes"){
		count++;
		assert true;
	}
}
if(count &lt;2 || count>2)
{
	assert false;
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetEmailAddress">
<con:settings/>
<con:config>
<script>Random random = new Random()
def randUserAccount = "automatedTesting" 
def domain= "@gmail.com"
int max = 10000
randnum = random.nextInt(max+10000)
return randUserAccount += randnum + domain</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Email Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>emailAddress</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetEmailAddress</con:sourceStep>
<con:targetType>emailAddress</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer ReferenceData">
<con:settings/>
<con:config><script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["GetReferenceData"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


if(json != null &amp;&amp; json.size() >0){
	for(def item: json){
		if(item.name == "Duration"){
			for(def i : item.items){
				testRunner.testCase.testSuite.setPropertyValue(i.value, i.value)
			}
		}
		if(item.name == "DiscountTypes"){
			for(def dItem : item.items){
				if(dItem.text == "Apprentice"){
				testRunner.testCase.testSuite.setPropertyValue('discountType', dItem.value)}
			}
			
		} 
		if(item.name == "PassengerTypes"){
			for(def pItem : item.items){
			if(pItem.text == "Adult"){
				testRunner.testCase.testSuite.setPropertyValue('passengerType', pItem.value)
			}
			}
		} 
		
		
	}
}
</script></con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get All Active Stations">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get All Active Stations" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/station/stations</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/station/stations</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.size >0
for(def x: json){
	assert x.id != null
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer Station">
<con:settings/>
<con:config>
<script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["Station - Get All Active Stations"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


for(def station: json){
	if(station.name == context.expand('${InitialInputs#stationName}')){
		testRunner.testCase.testSuite.setPropertyValue('stationid',station.id.toString())
	}
}
</script>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>emailAddress</con:name>
<con:value>automatedTesting15845@gmail.com</con:value>
</con:property>
<con:property>
<con:name>dateString</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>3000</con:value>
</con:property>
<con:property>
<con:name>stationName</con:name>
<con:value>Greenford</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>258456</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer</con:endpoint>
<con:request>{
"title" :"Miss",
"firstName" :"Samantha Wanda",
"initials" :"S",
"lastName" :"Jones",
"houseNameNumber" :"38",
"street" :"Nightingale Gardens",
"town" : "Rugby",
"county" :"Warwickshire",
"country" :"GB",
"postcode" :"CV230WT",
"homePhone" :"01234567891",
"mobilePhone" :"01234567899",
"emailAddress" :"${InitialInputs#emailAddress}",
"username":"${InitialInputs#emailAddress}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/customer/nemo-tfl-services/</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.errors == null
assert json.id != null
assert json.username == context.expand('${InitialInputs#emailAddress}')</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion">
<con:configuration/>
</con:assertion>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Customer">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45147</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Customer Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>customerid</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Customer</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>testSuiteCustomerId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>customerid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>testSuiteCardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>cardid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>





















<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Exisiting" searchProperties="true" id="78d46139-509d-467d-a0c2-016665b1af21">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 1MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3Month Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate1Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3Month Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate3Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone1Month</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1Month</con:name>
<con:value>05/02/2015</con:value>
</con:property>
<con:property>
<con:name>startDate3Month</con:name>
<con:value>05/04/2015</con:value>
</con:property>
<con:property>
<con:name>endZone3Month</con:name>
<con:value>11</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="1Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>10100</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Monthly Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1423094400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1425427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40774</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get1MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get1MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#1Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone1Month}" ,
"startDate" : "${InitialInputs#startDate1Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="1Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get3MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get3MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#3Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone3Month}" ,
"startDate" : "${InitialInputs#startDate3Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="3Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>70390</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>3 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1428188400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1435964400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>3Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40866</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="3Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45151</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${1Month TravelCard#price},
         "name": "${1Month TravelCard#name}",
         "startDate": ${1Month TravelCard#startDate},
         "endDate": ${1Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${1Month TravelCard#startZone},
         "endZone": ${1Month TravelCard#endZone},
         "duration": "${1Month TravelCard#duration}",
         "productType": "${1Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${1Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${3Month TravelCard#price},
         "name": "${3Month TravelCard#name}",
         "startDate": ${3Month TravelCard#startDate},
         "endDate": ${3Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${3Month TravelCard#startZone},
         "endZone": ${3Month TravelCard#endZone},
         "duration": "${3Month TravelCard#duration}",
         "productType": "${3Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${3Month TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45155</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45156</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
def cardId = context.expand('${Card#id}')
if(json.cardId == cardId){
	assert true;
}

assert json.settlements != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>


<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones" searchProperties="true" id="e329d9b8-88b7-40c1-9258-1d05b72fd52f">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 5DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 5)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 5DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>10/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="goto" name="Card - Update - No Oyster Number"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>NoOysterNumber</con:name><con:type>XPATH</con:type><con:expression>not(//*:prestigeId[1]/text())</con:expression><con:targetStep>Cubic - AddCard</con:targetStep></con:condition><con:condition><con:name>OysterCard</con:name><con:type>XPATH</con:type><con:expression>not(//*:prestigeId[1]/text() =null)</con:expression><con:targetStep>Cart</con:targetStep></con:condition></con:config></con:testStep>
<con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${#TestSuite#oysterNumber}",
"passengerType": "${#TestSuite#passengerType}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
assert json.passengerType != null
assert json.prestigeId == context.expand('${#TestSuite#oysterNumber}')</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Update"><con:settings/><con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Card - Update" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost/nemo-tfl-services/card/${Card#id}</con:endpoint><con:request>{
"prestigeId":"${#TestSuite#oysterNumber}"
}</con:request><con:originalUri>http://localhost/nemo-tfl-services/card/39945</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null</scriptText></con:configuration></con:assertion><con:credentials><con:username>tfl-user</con:username><con:password>w3b53rv1c3s#$</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40690</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1680</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 2 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421366400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40668</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45160</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 2" searchProperties="true" id="6ff81e93-ed4f-4dc5-b511-be15c50cc69f">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 5DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 5)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 5DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>10/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1680</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 2 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40668</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421366400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40690</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>

<con:testStep type="goto" name="Card - No Update - Oyster Number"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>NoOysterNumber</con:name><con:type>XPATH</con:type><con:expression>not(//*:prestigeId[1]/text())</con:expression><con:targetStep>Cart - Delete</con:targetStep></con:condition><con:condition><con:name>OysterCard</con:name><con:type>XPATH</con:type><con:expression>not(//*:prestigeId[1]/text() =null)</con:expression><con:targetStep>Cart - Create</con:targetStep></con:condition></con:config></con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45162</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 3" searchProperties="true" id="9ed74480-af90-4245-833e-7c4bcd35c5f8">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>08/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2230</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 2 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40664</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone5}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420675200000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421193600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40690</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45164</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 4" searchProperties="true" id="09797e1f-90b2-43b2-a22b-f335e278eccc">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1MonthAnd3DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 4)
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1MonthAnd3DaysAhead</con:sourceStep>
<con:targetType>endDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>08/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>zone6</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>endDate1</con:name>
<con:value>09/02/2015</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2630</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40688</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1680</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420675200000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421193600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40626</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate1}",
"endDate":"${InitialInputs#endDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>&lt;price null="true" xmlns="http://localhost/nemo-tfl-services/product/getTravelcard"/>
</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>1-2 months Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1423440000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40145</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45166</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
      ,
      {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Travelcard Order Processing" searchProperties="true" id="03000e24-b1cc-41cf-a665-eb8c0e89b2e9">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 6MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 6)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1Year Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 6MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate6Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1Year Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDateAnnual</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone11</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate6Month</con:name>
<con:value>05/07/2015</con:value>
</con:property>
<con:property>
<con:name>startDateAnnual</con:name>
<con:value>05/01/2016</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="6Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>140780</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>6 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1436050800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1451865600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40952</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get6MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get6MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#6Month}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone11}" ,
"startDate" : "${InitialInputs#startDate6Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="6Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDateAnnual}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>89600</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Annual Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1451952000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1483488000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>41034</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45170</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${6Month TravelCard#price},
         "name": "${6Month TravelCard#name}",
         "startDate": ${6Month TravelCard#startDate},
         "endDate": ${6Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${6Month TravelCard#startZone},
         "endZone": ${6Month TravelCard#endZone},
         "duration": "${6Month TravelCard#duration}",
         "productType": "${6Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${6Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${Annual TravelCard#price},
         "name": "${Annual TravelCard#name}",
         "startDate": ${Annual TravelCard#startDate},
         "endDate": ${Annual TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${Annual TravelCard#startZone},
         "endZone": ${Annual TravelCard#endZone},
         "duration": "${Annual TravelCard#duration}",
         "productType": "${Annual TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Annual TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45174</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45175</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOutstandingOrders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOutstandingOrders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
assert json.id != null
assert json.name != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45174</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Exisiting - With Oyster Number" searchProperties="true" id="c1e25587-cd77-40b1-be18-c5ce4c5a1a4a">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 1MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3Month Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate1Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3Month Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate3Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone1Month</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1Month</con:name>
<con:value>05/02/2015</con:value>
</con:property>
<con:property>
<con:name>startDate3Month</con:name>
<con:value>05/04/2015</con:value>
</con:property>
<con:property>
<con:name>endZone3Month</con:name>
<con:value>11</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="1Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>10100</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Monthly Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1423094400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1425427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40774</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get1MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get1MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#1Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone1Month}" ,
"startDate" : "${InitialInputs#startDate1Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="1Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get3MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get3MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#3Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone3Month}" ,
"startDate" : "${InitialInputs#startDate3Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="3Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>70390</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>3 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1428188400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1435964400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>3Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40866</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="3Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45190</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${1Month TravelCard#price},
         "name": "${1Month TravelCard#name}",
         "startDate": ${1Month TravelCard#startDate},
         "endDate": ${1Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${1Month TravelCard#startZone},
         "endZone": ${1Month TravelCard#endZone},
         "duration": "${1Month TravelCard#duration}",
         "productType": "${1Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${1Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${3Month TravelCard#price},
         "name": "${3Month TravelCard#name}",
         "startDate": ${3Month TravelCard#startDate},
         "endDate": ${3Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${3Month TravelCard#startZone},
         "endZone": ${3Month TravelCard#endZone},
         "duration": "${3Month TravelCard#duration}",
         "productType": "${3Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${3Month TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45194</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45195</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
def cardId = context.expand('${Card#id}')
if(json.cardId == cardId){
	assert true;
}

assert json.settlements != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterCheckout">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterCheckout" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json!= null
assert json.errorDescription == null
assert json.pendingItems != null
assert json.pendingItems.size()  >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get Outstanding Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get Outstanding Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer/2834/2837/outstanding</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.errors == null
assert json.name != null
assert json.id != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones 5" searchProperties="true" id="82914867-4406-4176-9d74-d461aa8c56e4">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 4DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 4)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 7DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 7)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3MonthAnd8DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 8)
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 4DaysAhead</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 7DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3MonthAnd8DaysAhead</con:sourceStep>
<con:targetType>endDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>09/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>12/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>zone6</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>endDate1</con:name>
<con:value>13/04/2015</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2630</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420761600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421280000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40688</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate1}",
"endDate":"${InitialInputs#endDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>&lt;price null="true" xmlns="http://localhost/nemo-tfl-services/product/getTravelcard"/>
</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>3-4 months Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420761600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1428879600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40231</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45205</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Exceeds Maximum Travelcards" searchProperties="true" id="9544b606-5fcd-4ca7-b22e-7298f4255aa5">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 6MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 6)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1Year Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 6MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate6Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1Year Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDateAnnual</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone11</con:name>
<con:value>12</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate6Month</con:name>
<con:value>05/07/2015</con:value>
</con:property>
<con:property>
<con:name>startDateAnnual</con:name>
<con:value>05/01/2016</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="6Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>160130</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>6 Month Travelcard Zones 1 to 12</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1436050800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1451865600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>12</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40950</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get6MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get6MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#6Month}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone11}" ,
"startDate" : "${InitialInputs#startDate6Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="6Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDateAnnual}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>89600</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Annual Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1451952000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1483488000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>41034</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45206</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${6Month TravelCard#price},
         "name": "${6Month TravelCard#name}",
         "startDate": ${6Month TravelCard#startDate},
         "endDate": ${6Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${6Month TravelCard#startZone},
         "endZone": ${6Month TravelCard#endZone},
         "duration": "${6Month TravelCard#duration}",
         "productType": "${6Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${6Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${Annual TravelCard#price},
         "name": "${Annual TravelCard#name}",
         "startDate": ${Annual TravelCard#startDate},
         "endDate": ${Annual TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${Annual TravelCard#startZone},
         "endZone": ${Annual TravelCard#endZone},
         "duration": "${Annual TravelCard#duration}",
         "productType": "${Annual TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Annual TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "EXCEEDS_MAXIMUM_TRAVEL_CARDS_INCLUDING_PENDING_OR_EXISTING"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Cancel Order" searchProperties="true" id="45bb0b1b-cb08-4f26-a20b-39ffd1cf1e09">
<con:settings/>
<con:testStep type="groovy" name="GetDate - StartDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10)
{
	day = "0"+day;
}

def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month &lt;10){
	month = "0"+month
}
return(day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - StartDate</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate</con:name>
<con:value>04/01/2015</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>1500</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1500</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${Inputs#startZone}",  
"endZone": "${Inputs#endZone}" ,
"startDate" : "${Inputs#startDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420329600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40690</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45208</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   },      
   {
         "errors": null,
         "price": ${7Day TravelCard#price},
         "name": "${7Day TravelCard#name}",
         "startDate": ${7Day TravelCard#startDate},
         "endDate": ${7Day TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard#startZone},
         "endZone": ${7Day TravelCard#endZone},
         "duration": "${7Day TravelCard#duration}",
         "productType": "${7Day TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - GetCart">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - GetCart" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36312</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent;
def json = new JsonSlurper().parseText res

assert json != null
assert json.id != null
assert json.errors == null
assert json.cartItems.size() ==1
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45212</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45213</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${Inputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Get">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Get" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/customer/36283</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45212</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - PAYG Order Processing" searchProperties="true" id="66cdb443-48a1-4217-9971-377f026695ea">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45222</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45224</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45225</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${Inputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - Get Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - Get Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Inputs#fromDate}/${Inputs#toDate}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer//10/10/2014/9/10/2014</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.orders.size >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Get">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Get" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/customer/36283</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterCheckout">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterCheckout" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json!= null
assert json.errorDescription == null
assert json.pendingItems != null
assert json.pendingItems.size()  >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - PAYG Order Processing" searchProperties="true" id="1ac23aa6-083c-4d9c-87ae-b6dd41bfe887">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${Inputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45231</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "PAY_AS_YOU_GO_CREDIT_GREATER_THAN_LIMIT"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - PAYG Order Processing - Purchase Limit Reached" searchProperties="true" id="dd8f4428-7ceb-47bf-8155-d7cc388cfd2f">
<con:settings/>
<con:testStep type="groovy" name="GetDate - CurrentDate">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Yesterday">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Dates">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - CurrentDate</con:sourceStep>
<con:sourcePath/>
<con:targetType>toDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Yesterday</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>Inputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Inputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1596</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45232</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/Add PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/Add PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
      {
   "errors": null,
   "price": 5500,
   "name": " Pay as you go credit",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "Pay as you go",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "PAY_AS_YOU_GO_CREDIT_GREATER_THAN_PURCHASE_LIMIT"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Annual Ticket - No Concession End Date" searchProperties="true" id="802f6b8b-5ccc-486b-a92d-05f7de205477">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInpute Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40544</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>






<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45233</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 2)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
def date = (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() >0
for(def item: json.cartItems){
	assert item.formattedEndDate == date
	assert item.name.contains('Annual')
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45235</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45236</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45235</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Odd Period - End Date After Concession End Date" searchProperties="true" id="1784dae4-6bb3-4945-9ca8-a8783237773a">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd7DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 7)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInput Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd7DaysAheadAndYear</con:sourceStep>
<con:targetType>concessionEndDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>12/11/2016</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40544</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45245</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${InitInputs#concessionEndDate}')
	assert item.duration == 'Unknown'
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45247</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45248</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45247</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Odd Period - End Date Before Concession End Date" searchProperties="true" id="01c79c36-2e34-419e-a80f-cf98ffee4bc8">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd17DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 17)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInput Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd17DaysAheadAndYear</con:sourceStep>
<con:targetType>concessionEndDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>22/11/2016</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40544</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45257</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${InitInputs#concessionEndDate}')
	assert item.duration == 'Unknown'
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45259</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45260</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45259</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Annual Ticket - Concession End Date After Annual Date" searchProperties="true" id="9f5edde7-6432-4f76-8294-8b5c5994b1a3">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInpute Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45150</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40544</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>74400</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45269</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 2)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
def date = (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() >0
for(def item: json.cartItems){
	assert item.formattedEndDate == date
	assert item.name.contains('Annual')
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45271</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45272</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45271</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Exceeds Maximum Pending Items" searchProperties="true" id="2a71bb15-b687-4d84-8207-27bb378179ea">
<con:settings/>
<con:testStep type="groovy" name="GetDate - YesterdayDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)//(day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Today">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextWeek">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 8)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextMonth">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInputs Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>oysterNumber</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetOysterNumber</con:sourceStep>
<con:targetType>oysterNumber</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false">
<con:name>nextDayDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>tcDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false">
<con:name>nextWeekDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextWeek</con:sourceStep>
<con:targetType>tcDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferToAll="false">
<con:name>nextMonthDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextMonth</con:sourceStep>
<con:targetType>tcDate3</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - YesterdayDay</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Today</con:sourceStep>
<con:targetType>toDate</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>emailAddress</con:name>
<con:value>automatedTesting2498@gmail.com</con:value>
</con:property>
<con:property>
<con:name>tcDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>258456</con:value>
</con:property>
<con:property>
<con:name>oysterNumber</con:name>
<con:value>003769794032</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>10/09/2015</con:value>
</con:property>
<con:property>
<con:name>tcDate2</con:name>
<con:value>13/01/2015</con:value>
</con:property>
<con:property>
<con:name>tcDate3</con:name>
<con:value>06/02/2015</con:value>
</con:property>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${InitialInputs#oysterNumber}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>


<con:testStep type="groovy" name="GetEmailAddress">
<con:settings/>
<con:config>
<script>Random random = new Random()
def randUserAccount = "automatedTesting" 
def domain= "@gmail.com"
int max = 10000
randnum = random.nextInt(max+10000)
return randUserAccount += randnum + domain</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Email Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>emailAddress</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetEmailAddress</con:sourceStep>
<con:targetType>emailAddress</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer</con:endpoint>
<con:request>{
"title" :"Miss",
"firstName" :"Samantha Wanda",
"initials" :"S",
"lastName" :"Jones",
"houseNameNumber" :"38",
"street" :"Nightingale Gardens",
"town" : "Rugby",
"county" :"Warwickshire",
"country" :"GB",
"postcode" :"CV230WT",
"homePhone" :"01234567891",
"mobilePhone" :"01234567899",
"emailAddress" :"${InitialInputs#emailAddress}",
"username":"${InitialInputs#emailAddress}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/customer/nemo-tfl-services/</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.errors == null
assert json.id != null
assert json.username == context.expand('${InitialInputs#emailAddress}')</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion">
<con:configuration/>
</con:assertion>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Customer">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45287</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Customer Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>customerid</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Customer</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>testSuiteCustomerId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>customerid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}/${InitialInputs#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>testSuiteCardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>cardid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45290</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45327</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo - £5">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo - £5" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":500
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer - £5">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer - PAYG">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45320</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45321</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer - PAYG">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - PAYG</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - PAYG</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOrder - PAYG">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOrder - PAYG" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
def cardId = context.expand('${Card#id}')
if(json.cardId == cardId){
	assert true;
}

assert json.settlements != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1423180800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1423699200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40690</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard 2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard 2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC2</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC2">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC2</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC2</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard 3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard 3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate3}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC3</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC3">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC3</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC3</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo - £50">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo - £50" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":5000
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer - £50">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>

<con:testStep type="restrequest" name="Cart - Create - PAYG2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - PAYG2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer - PAYG2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - PAYG2</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - PAYG2">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - PAYG2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0

assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "EXCEEDS_MAXIMUM_PENDING_ITEMS"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>




<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${Customer#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>


<con:testStep type="restrequest" name="Order - Get Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - Get Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${Customer#id}/${InitialInputs#fromDate}/${InitialInputs#toDate}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer//10/10/2014/9/10/2014</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.orders.size >0

for(def order: json.orders){
	assert order != null
	assert order.items != null
	assert order.items.size > 0
	assert order.status == "Paid"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase><con:properties>
<con:property>
<con:name>customerid</con:name>
<con:value>45287</con:value>
</con:property>
<con:property>
<con:name>cardid</con:name>
<con:value>45290</con:value>
</con:property>
<con:property>
<con:name>stationId</con:name>
<con:value>589</con:value>
</con:property>
<con:property>
<con:name>oysterNumber</con:name>
<con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">025496079667</con:value>
</con:property>
<con:property>
<con:name>passengerType</con:name>
<con:value>Adult</con:value>
</con:property>
<con:property>
<con:name>discountType</con:name>
<con:value>Apprentice</con:value>
</con:property>
<con:property>
<con:name>7Day</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>1Month</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>3Month</con:name>
<con:value>3Month</con:value>
</con:property>
<con:property>
<con:name>6Month</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>Unknown</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>Annual</con:name>
<con:value>Annual</con:value>
</con:property>

</con:properties>
</con:testSuite><con:testSuite name="Automated Test - Child - No Discount - 3 Cards"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Create" searchProperties="true" id="3925dad8-06cc-42f5-932f-4e07dd30e4f8">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInputs Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>nextDayDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>dateString</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GetReferenceData">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="GetReferenceData" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/referenceData</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/product/referenceData</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.size() >0
def count = 0;
for(def item: json){
	if(item.name == "PassengerTypes" || item.name == "DiscountTypes"){
		count++;
		assert true;
	}
}
if(count &lt;2 || count>2)
{
	assert false;
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>

<con:testStep type="groovy" name="GetEmailAddress">
<con:settings/>
<con:config>
<script>Random random = new Random()
def randUserAccount = "automatedTesting" 
def domain= "@gmail.com"
int max = 10000
randnum = random.nextInt(max+10000)
return randUserAccount += randnum + domain</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Email Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>emailAddress</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetEmailAddress</con:sourceStep>
<con:targetType>emailAddress</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer ReferenceData">
<con:settings/>
<con:config><script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["GetReferenceData"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


if(json != null &amp;&amp; json.size() >0){
	for(def item: json){
		if(item.name == "Duration"){
			for(def i : item.items){
				testRunner.testCase.testSuite.setPropertyValue(i.value, i.value)
			}
		}
		if(item.name == "DiscountTypes"){
			for(def dItem : item.items){
				if(dItem.text == "No Discount"){
				testRunner.testCase.testSuite.setPropertyValue('discountType', dItem.value)}
			}
			
		} 
		if(item.name == "PassengerTypes"){
			for(def pItem : item.items){
			if(pItem.text == "Child"){
				testRunner.testCase.testSuite.setPropertyValue('passengerType', pItem.value)
			}
			}
		} 
		
		
	}
}
</script></con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get All Active Stations">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get All Active Stations" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/station/stations</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/station/stations</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.size >0
for(def x: json){
	assert x.id != null
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer Station">
<con:settings/>
<con:config>
<script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["Station - Get All Active Stations"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


for(def station: json){
	if(station.name == context.expand('${InitialInputs#stationName}')){
		testRunner.testCase.testSuite.setPropertyValue('stationid',station.id.toString())
	}
}
</script>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>emailAddress</con:name>
<con:value>automatedTesting5429@gmail.com</con:value>
</con:property>
<con:property>
<con:name>dateString</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>3000</con:value>
</con:property>
<con:property>
<con:name>stationName</con:name>
<con:value>Greenford</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>258456</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer</con:endpoint>
<con:request>{
"title" :"Miss",
"firstName" :"Samantha Wanda",
"initials" :"S",
"lastName" :"Jones",
"houseNameNumber" :"38",
"street" :"Nightingale Gardens",
"town" : "Rugby",
"county" :"Warwickshire",
"country" :"GB",
"postcode" :"CV230WT",
"homePhone" :"01234567891",
"mobilePhone" :"01234567899",
"emailAddress" :"${InitialInputs#emailAddress}",
"username":"${InitialInputs#emailAddress}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/customer/nemo-tfl-services/</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.errors == null
assert json.id != null
assert json.username == context.expand('${InitialInputs#emailAddress}')</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion">
<con:configuration/>
</con:assertion>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Customer">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45329</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Customer Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>customerid</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Customer</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" disabled="false" useXQuery="false">
<con:name>testSuiteCustomerId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>customerid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create - One">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create - One" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration><token>(?s).*id.*</token><ignoreCase>false</ignoreCase><useRegEx>true</useRegEx></con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create - Two">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create - Two" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration><token>(?s).*id.*</token><ignoreCase>false</ignoreCase><useRegEx>true</useRegEx></con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create - Three">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create - Three" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration><token>(?s).*id.*</token><ignoreCase>false</ignoreCase><useRegEx>true</useRegEx></con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>

<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create - One</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>testSuiteCardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create - One</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>cardid1</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>cardId2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Card - Create - Two</con:sourceStep><con:sourcePath>//*:id</con:sourcePath><con:targetType>cardid2</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath xsi:nil="true"/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>cardId3</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Card - Create - Three</con:sourceStep><con:sourcePath>//*:id</con:sourcePath><con:targetType>cardid3</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath xsi:nil="true"/></con:transfers></con:config>
</con:testStep>




















<con:testStep type="properties" name="Card1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45332</con:value>
</con:property>
<con:property><con:name>oysterNumber</con:name><con:value>040221411928</con:value></con:property></con:properties>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${Card1#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/station/stations</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.id != null
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Travelcard Order Processing - Card3" searchProperties="true" id="deead2cc-71ec-4e69-8786-755dcd3713a3">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 6MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 6)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1Year Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 6MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate6Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1Year Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDateAnnual</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone11</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate6Month</con:name>
<con:value>05/07/2015</con:value>
</con:property>
<con:property>
<con:name>startDateAnnual</con:name>
<con:value>05/01/2016</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="6Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>100690</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>6 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1436050800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1451865600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40049</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get6MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get6MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#6Month}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone11}" ,
"startDate" : "${InitialInputs#startDate6Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="6Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDateAnnual}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>64400</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Annual Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1451952000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1483488000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40131</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid3}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45334</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45335</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "passengerType":"${#TestSuite#passengerType}",
   "discountType":"${#TestSuite#discountType}",
   "cartItems": [  
   {
         "errors": null,
         "price": ${6Month TravelCard#price},
         "name": "${6Month TravelCard#name}",
         "startDate": ${6Month TravelCard#startDate},
         "endDate": ${6Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${6Month TravelCard#startZone},
         "endZone": ${6Month TravelCard#endZone},
         "duration": "${6Month TravelCard#duration}",
         "productType": "${6Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${6Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${Annual TravelCard#price},
         "name": "${Annual TravelCard#name}",
         "startDate": ${Annual TravelCard#startDate},
         "endDate": ${Annual TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${Annual TravelCard#startZone},
         "endZone": ${Annual TravelCard#endZone},
         "duration": "${Annual TravelCard#duration}",
         "productType": "${Annual TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Annual TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45339</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45340</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>





<con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Travelcard Order Processing - Card1" searchProperties="true" id="d7db3dd8-74eb-4b3a-be6a-bb0185486a07">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 6MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 6)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1Year Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 6MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate6Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1Year Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDateAnnual</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone11</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate6Month</con:name>
<con:value>05/07/2015</con:value>
</con:property>
<con:property>
<con:name>startDateAnnual</con:name>
<con:value>05/01/2016</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="6Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>100690</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>6 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1436050800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1451865600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40049</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get6MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get6MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#6Month}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone11}" ,
"startDate" : "${InitialInputs#startDate6Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="6Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDateAnnual}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>64400</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Annual Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1451952000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1483488000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40131</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid1}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45332</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45344</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "passengerType":"${#TestSuite#passengerType}",
   "discountType":"${#TestSuite#discountType}",
   "cartItems": [  
   {
         "errors": null,
         "price": ${6Month TravelCard#price},
         "name": "${6Month TravelCard#name}",
         "startDate": ${6Month TravelCard#startDate},
         "endDate": ${6Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${6Month TravelCard#startZone},
         "endZone": ${6Month TravelCard#endZone},
         "duration": "${6Month TravelCard#duration}",
         "productType": "${6Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${6Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${Annual TravelCard#price},
         "name": "${Annual TravelCard#name}",
         "startDate": ${Annual TravelCard#startDate},
         "endDate": ${Annual TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${Annual TravelCard#startZone},
         "endZone": ${Annual TravelCard#endZone},
         "duration": "${Annual TravelCard#duration}",
         "productType": "${Annual TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Annual TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45348</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45349</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>





<con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Update Card - Three" searchProperties="true" id="8dc9a773-7d75-4e71-a6c1-617eb3820d10"><con:settings/><con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep><con:testStep type="transfer" name="OysterNumber - Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>oysterNumber</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetOysterNumber</con:sourceStep><con:targetType>oysterNumber</con:targetType><con:targetStep>Card</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>cardId</con:name><con:sourceType>cardid3</con:sourceType><con:sourceStep>#TestSuite#</con:sourceStep><con:targetType>id</con:targetType><con:targetStep>Card</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Card"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>oysterNumber</con:name><con:value>060529350881</con:value></con:property><con:property><con:name>id</con:name><con:value>45334</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${Card#oysterNumber}",
"passengerType":"${#TestSuite#passengerType}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
assert json.passengerType != null
assert json.prestigeId == context.expand('${Card#oysterNumber}')</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Card - Update"><con:settings/><con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Card - Update" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost/nemo-tfl-services/card/${Card#id}</con:endpoint><con:request>{
"prestigeId":"${Card#oysterNumber}"
}</con:request><con:originalUri>http://localhost/nemo-tfl-services/card/39945</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
assert json.passengerType != null
assert json.passengerType == context.expand('${#TestSuite#passengerType}')
assert json.prestigeId == context.expand('${Card#oysterNumber}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>tfl-user</con:username><con:password>w3b53rv1c3s#$</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/station/stations</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.id != null
assert json.prestigeId != null
assert json.id+"" == context.expand('${Card#id}')+""
assert json.prestigeId == context.expand('${Card#oysterNumber}')</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Travelcard Order Processing - Card2" searchProperties="true" id="ab0a043b-37d6-483e-b90c-7dae57e7a2cb">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 6MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 6)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 1Year Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 6MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate6Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1Year Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDateAnnual</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone11</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate6Month</con:name>
<con:value>05/07/2015</con:value>
</con:property>
<con:property>
<con:name>startDateAnnual</con:name>
<con:value>05/01/2016</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="6Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>100690</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>6 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1436050800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1451865600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40049</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get6MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get6MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#6Month}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone11}" ,
"startDate" : "${InitialInputs#startDate6Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="6Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get6MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>6Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDateAnnual}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>64400</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Annual Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1451952000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1483488000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>40131</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid2}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45333</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45358</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "passengerType":"${#TestSuite#passengerType}",
   "discountType":"${#TestSuite#discountType}",
   "cartItems": [  
   {
         "errors": null,
         "price": ${6Month TravelCard#price},
         "name": "${6Month TravelCard#name}",
         "startDate": ${6Month TravelCard#startDate},
         "endDate": ${6Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${6Month TravelCard#startZone},
         "endZone": ${6Month TravelCard#endZone},
         "duration": "${6Month TravelCard#duration}",
         "productType": "${6Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${6Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${Annual TravelCard#price},
         "name": "${Annual TravelCard#name}",
         "startDate": ${Annual TravelCard#startDate},
         "endDate": ${Annual TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${Annual TravelCard#startZone},
         "endZone": ${Annual TravelCard#endZone},
         "duration": "${Annual TravelCard#duration}",
         "productType": "${Annual TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Annual TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45362</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45363</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>





<con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Update Card - One" searchProperties="true" id="aec09f3b-1ac7-4672-9e5a-9700e7170e86"><con:settings/><con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep><con:testStep type="transfer" name="OysterNumber - Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>oysterNumber</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetOysterNumber</con:sourceStep><con:targetType>oysterNumber</con:targetType><con:targetStep>Card</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>cardId</con:name><con:sourceType>cardid1</con:sourceType><con:sourceStep>#TestSuite#</con:sourceStep><con:targetType>id</con:targetType><con:targetStep>Card</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Card"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>oysterNumber</con:name><con:value>020872839662</con:value></con:property><con:property><con:name>id</con:name><con:value>45332</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${Card#oysterNumber}",
"passengerType":"${#TestSuite#passengerType}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
assert json.passengerType != null
assert json.prestigeId == context.expand('${Card#oysterNumber}')</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Card - Update"><con:settings/><con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Card - Update" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost/nemo-tfl-services/card/${Card#id}</con:endpoint><con:request>{
"prestigeId":"${Card#oysterNumber}"
}</con:request><con:originalUri>http://localhost/nemo-tfl-services/card/39945</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
assert json.passengerType != null
assert json.passengerType == context.expand('${#TestSuite#passengerType}')
assert json.prestigeId == context.expand('${Card#oysterNumber}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>tfl-user</con:username><con:password>w3b53rv1c3s#$</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/station/stations</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.id != null
assert json.prestigeId != null
assert json.id+"" == context.expand('${Card#id}')+""
assert json.prestigeId == context.expand('${Card#oysterNumber}')</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Update Card - Oyster Number already assigned" searchProperties="true" id="3b56826c-37b3-4091-9ea8-373c6fc448af"><con:settings/><con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config><script>def oysterNumber
def testCase = testRunner.testCase.testSuite.getTestCaseByName("Successful - Update Card - One")
def testStep = testCase.testSteps["Card"]
assert testStep!=null
assert testStep.getProperty("oysterNumber") != null
return testStep.getProperty("oysterNumber").getValue()</script></con:config>
</con:testStep><con:testStep type="transfer" name="OysterNumber - Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>oysterNumber</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetOysterNumber</con:sourceStep><con:targetType>oysterNumber</con:targetType><con:targetStep>Card</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>cardId</con:name><con:sourceType>cardid1</con:sourceType><con:sourceStep>#TestSuite#</con:sourceStep><con:targetType>id</con:targetType><con:targetStep>Card</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Card"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>oysterNumber</con:name><con:value>020872839662</con:value></con:property><con:property><con:name>id</con:name><con:value>45332</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Card - Update"><con:settings/><con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Card - Update" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost/nemo-tfl-services/card/${Card#id}</con:endpoint><con:request>{
"prestigeId":"${Card#oysterNumber}"
}</con:request><con:originalUri>http://localhost/nemo-tfl-services/card/39945</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
assert json.prestigeId == context.expand('${Card#oysterNumber}')
assert json.errorCode != null 
assert json.errorCode == 'CARD_ALREADY_ASSOCIATED_ERROR'</scriptText></con:configuration></con:assertion><con:credentials><con:username>tfl-user</con:username><con:password>w3b53rv1c3s#$</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/station/stations</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.id != null
assert json.prestigeId != null
assert json.id+"" == context.expand('${Card#id}')+""
assert json.prestigeId == context.expand('${Card#oysterNumber}')</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones - Card1" searchProperties="true" id="984b9274-3cf8-45bb-bda2-595e1048f0e5">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 5DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 5)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 5DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>10/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone2</con:name>
<con:value>2</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1610</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>39787</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone2}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard1">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard1" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone2}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard1">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1210</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 2 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420848000000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421366400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>39765</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer1">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard1</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard1</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid1}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45332</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45372</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "cartItems": [  
   {
         "errors": null,
         "price": ${7DayTravelCard#price},
         "name": "${7DayTravelCard#name}",
         "startDate": ${7DayTravelCard#startDate},
         "endDate": ${7DayTravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7DayTravelCard#startZone},
         "endZone": ${7DayTravelCard#endZone},
         "duration": "${7DayTravelCard#duration}",
         "productType": "${7DayTravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7DayTravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${7Day TravelCard1#price},
         "name": "${7Day TravelCard1#name}",
         "startDate": ${7Day TravelCard1#startDate},
         "endDate": ${7Day TravelCard1#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard1#startZone},
         "endZone": ${7Day TravelCard1#endZone},
         "duration": "${7Day TravelCard1#duration}",
         "productType": "${7Day TravelCard1#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard1#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Update Card - Two" searchProperties="true" id="66e4efc7-3cbb-49b7-8358-d4c05f7cbb44"><con:settings/><con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep><con:testStep type="transfer" name="OysterNumber - Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>oysterNumber</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetOysterNumber</con:sourceStep><con:targetType>oysterNumber</con:targetType><con:targetStep>Card</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>cardId</con:name><con:sourceType>cardid2</con:sourceType><con:sourceStep>#TestSuite#</con:sourceStep><con:targetType>id</con:targetType><con:targetStep>Card</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Card"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>oysterNumber</con:name><con:value>051454905769</con:value></con:property><con:property><con:name>id</con:name><con:value>45333</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${Card#oysterNumber}",
"passengerType":"${#TestSuite#passengerType}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
assert json.passengerType != null
assert json.prestigeId == context.expand('${Card#oysterNumber}')</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Card - Update"><con:settings/><con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Card - Update" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost/nemo-tfl-services/card/${Card#id}</con:endpoint><con:request>{
"prestigeId":"${Card#oysterNumber}"
}</con:request><con:originalUri>http://localhost/nemo-tfl-services/card/39945</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
assert json.passengerType != null
assert json.passengerType == context.expand('${#TestSuite#passengerType}')
assert json.prestigeId == context.expand('${Card#oysterNumber}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>tfl-user</con:username><con:password>w3b53rv1c3s#$</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/station/stations</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.id != null
assert json.prestigeId != null
assert json.id+"" == context.expand('${Card#id}')+""
assert json.prestigeId == context.expand('${Card#oysterNumber}')</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Exisiting - Card1" searchProperties="true" id="e75878ae-8521-4bc0-b061-50fa5b92d7e1">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 1MonthAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3Month Ahead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>startDate1Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 1MonthAhead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate1Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate3Month</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3Month Ahead</con:sourceStep>
<con:sourcePath/>
<con:targetType>startDate3Month</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
<con:targetPath/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>paygAmount</con:name>
<con:value>2000</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone1Month</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>456789852</con:value>
</con:property>
<con:property>
<con:name>startDate1Month</con:name>
<con:value>05/02/2015</con:value>
</con:property>
<con:property>
<con:name>startDate3Month</con:name>
<con:value>05/04/2015</con:value>
</con:property>
<con:property>
<con:name>endZone3Month</con:name>
<con:value>11</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="1Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>7260</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Monthly Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1423094400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1425427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>39871</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get1MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get1MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#1Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone1Month}" ,
"startDate" : "${InitialInputs#startDate1Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="1Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get1MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>1Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get3MonthTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get3MonthTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#3Month}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone3Month}" ,
"startDate" : "${InitialInputs#startDate3Month}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="3Month TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>50350</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>3 Month Travelcard Zones 1 to 11</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1428188400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1435964400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>11</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>3Month</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>39963</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="3Month Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get3MonthTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>3Month TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid1}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45332</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45379</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "passengerType":"${#TestSuite#passengerType}",
   "discountType":"${#TestSuite#discountType}",
   "cartItems": [  
   {
         "errors": null,
         "price": ${1Month TravelCard#price},
         "name": "${1Month TravelCard#name}",
         "startDate": ${1Month TravelCard#startDate},
         "endDate": ${1Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${1Month TravelCard#startZone},
         "endZone": ${1Month TravelCard#endZone},
         "duration": "${1Month TravelCard#duration}",
         "productType": "${1Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${1Month TravelCard#prePaidProductReference}"
      },
      {
         "errors": null,
         "price": ${3Month TravelCard#price},
         "name": "${3Month TravelCard#name}",
         "startDate": ${3Month TravelCard#startDate},
         "endDate": ${3Month TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${3Month TravelCard#startZone},
         "endZone": ${3Month TravelCard#endZone},
         "duration": "${3Month TravelCard#duration}",
         "productType": "${3Month TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${3Month TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45383</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45384</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid1}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOrder">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOrder" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
def cardId = context.expand('${Card#id}')
if(json.cardId == cardId){
	assert true;
}

assert json.settlements != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCardAfterCheckout">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCardAfterCheckout" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid1}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json!= null
assert json.errorDescription == null
assert json.pendingItems != null
assert json.pendingItems.size()  >0</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get Outstanding Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get Outstanding Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer/2834/2837/outstanding</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.errors == null
assert json.name != null
assert json.id != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Overlapping Zones -Card1" searchProperties="true" id="8b9fe390-f76b-4c1c-b1e1-9a2205db4f0e">
<con:settings/>
<con:testStep type="groovy" name="GetDate - 4DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 4)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 7DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 7)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 3MonthAnd8DaysAhead">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 8)
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Transfer Initial Inputs">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 4DaysAhead</con:sourceStep>
<con:targetType>startDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" transferChildNodes="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 7DaysAhead</con:sourceStep>
<con:targetType>startDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 3MonthAnd8DaysAhead</con:sourceStep>
<con:targetType>endDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>startDate1</con:name>
<con:value>09/01/2015</con:value>
</con:property>
<con:property>
<con:name>startDate2</con:name>
<con:value>12/01/2015</con:value>
</con:property>
<con:property>
<con:name>zone1</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>zone6</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>endDate1</con:name>
<con:value>13/04/2015</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7DayTravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1890</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 3</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420761600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421280000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>39785</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#zone1}",  
"endZone": "${InitialInputs#zone3}" ,
"startDate" : "${InitialInputs#startDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" ignoreEmpty="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7DayTravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone":"${InitialInputs#zone5}",  
"endZone": "${InitialInputs#zone6}" ,
"startDate" : "${InitialInputs#startDate1}",
"endDate":"${InitialInputs#endDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>&lt;price null="true" xmlns="http://localhost/nemo-tfl-services/product/getTravelcard"/>
</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>3-4 months Travelcard Zones 5 to 6</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420761600000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1428879600000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>6</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>39328</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid1}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45332</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45394</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "passengerType":"${#TestSuite#passengerType}",
   "discountType":"${#TestSuite#discountType}",
   "cartItems": [  
      {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
import java.util.HashMap;
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "TRAVEL_CARD_OVERLAP"
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Odd Period - End Date After Concession End Date - Card1" searchProperties="true" id="7ed706e9-e541-4078-9856-7b6ca9fd910f">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd7DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 7)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInput Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd7DaysAheadAndYear</con:sourceStep>
<con:targetType>concessionEndDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>12/11/2016</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid1}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45332</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>39641</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>53200</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45395</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${InitInputs#concessionEndDate}')
	assert item.duration == 'Unknown'
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45397</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45398</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45397</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Odd Period - End Date Before Concession End Date - Card1" searchProperties="true" id="efbe6efe-c7ab-4d05-8dfe-a2c89eb3d1e2">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDayAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd13DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 13)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - 10MonthsAnd17DaysAheadAndYear">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 17)
calendar.add(Calendar.MONTH, 10)
calendar.add(Calendar.YEAR, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInput Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>date1</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDayAndYear</con:sourceStep>
<con:targetType>startDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" entitize="false">
<con:name>date2</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd13DaysAheadAndYear</con:sourceStep>
<con:targetType>endDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>date3</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - 10MonthsAnd17DaysAheadAndYear</con:sourceStep>
<con:targetType>concessionEndDate</con:targetType>
<con:targetStep>InitInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>zone3</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>zone5</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>06/01/2016</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>18/11/2016</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>1456320</con:value>
</con:property>
<con:property>
<con:name>concessionEndDate</con:name>
<con:value>22/11/2016</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid1}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45332</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>10-11 months Travelcard Zones 3 to 5</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1452038400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1479427200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>3</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>5</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>39641</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetAnnualTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetAnnualTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Annual}", 
"startZone": ${InitInputs#zone3},  
"endZone": ${InitInputs#zone5},
"startDate" : "${InitInputs#startDate}",
"endDate":"${InitInputs#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Annual TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>duration</con:name>
<con:value>Annual</con:value>
</con:property>

<con:property>
<con:name>price</con:name>
<con:value>53200</con:value>
</con:property>

</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Annual Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetAnnualTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>Annual TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45407</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${InitInputs#concessionEndDate}')
	assert item.duration == 'Unknown'
	assert item.price+"" == context.expand('${Annual TravelCard#price}')+""
}
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45409</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45410</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45409</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${#TestSuite#customerid}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Unsuccessful - Exceeds Maximum Pending Items - Card3" searchProperties="true" id="b8902430-9e05-4f3a-b06a-e7b2b0b9f38d">
<con:settings/>
<con:testStep type="groovy" name="GetDate - YesterdayDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, -1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)//(day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - Today">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (calendar.get(Calendar.YEAR)+""+month+""+day)

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextWeek">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 8)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetDate - NextMonth">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.MONTH, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>

<con:testStep type="transfer" name="InitInputs Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>nextDayDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>tcDate1</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false">
<con:name>nextWeekDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextWeek</con:sourceStep>
<con:targetType>tcDate2</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferToAll="false">
<con:name>nextMonthDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextMonth</con:sourceStep>
<con:targetType>tcDate3</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false">
<con:name>fromDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - YesterdayDay</con:sourceStep>
<con:targetType>fromDate</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
<con:name>toDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - Today</con:sourceStep>
<con:targetType>toDate</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>emailAddress</con:name>
<con:value>automatedTesting5955@gmail.com</con:value>
</con:property>
<con:property>
<con:name>tcDate1</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>258456</con:value>
</con:property>

<con:property>
<con:name>concessionEndDate</con:name>
<con:value>10/09/2015</con:value>
</con:property>
<con:property>
<con:name>tcDate2</con:name>
<con:value>13/01/2015</con:value>
</con:property>
<con:property>
<con:name>tcDate3</con:name>
<con:value>06/02/2015</con:value>
</con:property>
<con:property>
<con:name>fromDate</con:name>
<con:value>20150104</con:value>
</con:property>
<con:property>
<con:name>toDate</con:name>
<con:value>20150105</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/id/${#TestSuite#cardid3}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.errorCode == null
assert json.errorDescription == null</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>







<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">


<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>oyster</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Card - GetCard</con:sourceStep><con:sourcePath>//*:prestigeId</con:sourcePath><con:targetType>oyster</con:targetType><con:targetStep>Card</con:targetStep></con:transfers></con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>oyster</con:name>
<con:value>060529350881</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>

<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45455</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo - £5">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo - £5" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":500
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>5000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer - £5">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £5</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${#TestSuite#cardid3}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer - PAYG">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - PAYG">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${#TestSuite#cardid1},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "customerId": null,
   "cartItems": [  
   {
   "errors": null,
   "id": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}"
}
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45448</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45449</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer - PAYG">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - PAYG</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - PAYG</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - PAYG">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - PAYG" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Order - GetOrder - PAYG">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - GetOrder - PAYG" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/36122</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json!= null
def cardId = context.expand('${Card#id}')
if(json.cardId == cardId){
	assert true;
}

assert json.settlements != null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>1610</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1423180800000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1423699200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>39787</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate1}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${#TestSuite#cardid3}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${#TestSuite#cardid1},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId":null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard 2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard 2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate2}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 2</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${#TestSuite#cardid3}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC2</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC2">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${#TestSuite#cardid3},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC2</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC2</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard 3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard 3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#tcDate3}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard 3</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${#TestSuite#cardid3}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer -TC3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - TC3</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - TC3">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${#TestSuite#cardid3},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "price": ${TravelCard#price},
         "name": "${TravelCard#name}",
         "startDate": ${TravelCard#startDate},
         "endDate": ${TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${TravelCard#startZone},
         "endZone": ${TravelCard#endZone},
         "duration": "${TravelCard#duration}",
         "productType": "${TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer -TC3">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC3</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout - TC3</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout - TC3">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout - TC3" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo - £50">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo - £50" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":5000
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer - £50">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo - £50</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>

<con:testStep type="restrequest" name="Cart - Create - PAYG2">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create - PAYG2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${#TestSuite#cardid3}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer - PAYG2">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create - PAYG2</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems - PAYG2">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems - PAYG2" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${#TestSuite#cardid1},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "customerId": null,
   "cartItems": [  
   {
   "errors": null,
   "id": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}"
}
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0

assert json.errors != null
assert json.errors.size()>0
for(def errors: json.errors){
	def error = errors.getValue()
	assert error.description != null
	assert error.description[0]== "EXCEEDS_MAXIMUM_PENDING_ITEMS"
}</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>




<con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>


<con:testStep type="restrequest" name="Order - Get Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Order - Get Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${#TestSuite#customerid}/${InitialInputs#fromDate}/${InitialInputs#toDate}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer//10/10/2014/9/10/2014</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null
assert json.orders.size >0

for(def order: json.orders){
	assert order != null
	assert order.items != null
	assert order.items.size > 0
}
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase><con:properties><con:property><con:name>cardid1</con:name><con:value>45332</con:value></con:property><con:property><con:name>cardid2</con:name><con:value>45333</con:value></con:property><con:property><con:name>cardid3</con:name><con:value>45334</con:value></con:property><con:property><con:name>7Day</con:name><con:value>7Day</con:value></con:property><con:property><con:name>1Month</con:name><con:value>1Month</con:value></con:property><con:property><con:name>3Month</con:name><con:value>3Month</con:value></con:property><con:property><con:name>6Month</con:name><con:value>6Month</con:value></con:property><con:property><con:name>Annual</con:name><con:value>Annual</con:value></con:property><con:property><con:name>Unknown</con:name><con:value>Unknown</con:value></con:property><con:property><con:name>passengerType</con:name><con:value>Child</con:value></con:property><con:property><con:name>discountType</con:name><con:value>No Discount</con:value></con:property><con:property><con:name>stationid</con:name><con:value>589</con:value></con:property><con:property><con:name>customerid</con:name><con:value>45329</con:value></con:property></con:properties></con:testSuite><con:testSuite name="Automated Test - Check Odd Period Prices - Adult - 18+">
<con:settings/>
<con:runType>SEQUENTIAL</con:runType>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - Create" searchProperties="true" id="c55efa40-f21e-4691-886b-2b87cdd0b04c">
<con:settings/>
<con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config>
<script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetOysterNumber">
<con:settings/>
<con:config>
<script>def oysterCardLength = 11
def oysterNumber = "0"
Random random = new Random()
for(def i = 0; i&lt;oysterCardLength; i++){
	oysterNumber += ""+random.nextInt(10);
}
return oysterNumber</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="InitInputs Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>oysterNumber</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetOysterNumber</con:sourceStep>
<con:targetType>oysterNumber</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false">
<con:name>nextDayDate</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetDate - NextDay</con:sourceStep>
<con:targetType>dateString</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="GetReferenceData">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="GetReferenceData" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/referenceData</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/product/referenceData</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.size() >0
def count = 0;
for(def item: json){
	if(item.name == "PassengerTypes" || item.name == "DiscountTypes"){
		count++;
		assert true;
	}
}
if(count &lt;2 || count>2)
{
	assert false;
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="GetEmailAddress">
<con:settings/>
<con:config>
<script>Random random = new Random()
def randUserAccount = "automatedTesting" 
def domain= "@gmail.com"
int max = 10000
randnum = random.nextInt(max+10000)
return randUserAccount += randnum + domain</script>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Email Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>emailAddress</con:name>
<con:sourceType>result</con:sourceType>
<con:sourceStep>GetEmailAddress</con:sourceStep>
<con:targetType>emailAddress</con:targetType>
<con:targetStep>InitialInputs</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer ReferenceData">
<con:settings/>
<con:config>
<script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["GetReferenceData"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


if(json != null &amp;&amp; json.size() >0){
	for(def item: json){
		if(item.name == "Duration"){
			for(def i : item.items){
				testRunner.testCase.testSuite.setPropertyValue(i.value, i.value)
			}
		}
		if(item.name == "DiscountTypes"){
			for(def dItem : item.items){
				if(dItem.text == "18+"){
				testRunner.testCase.testSuite.setPropertyValue('discountType', dItem.value)}
			}
			
		} 
		if(item.name == "PassengerTypes"){
			for(def pItem : item.items){
			if(pItem.text == "Adult"){
				testRunner.testCase.testSuite.setPropertyValue('passengerType', pItem.value)
			}
			}
		} 
		
		
	}
}
</script>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cubic - AddCard">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cubic - AddCard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-mock-cubic/service/card/add</con:endpoint>
<con:request>{
"prestigeId": "${#TestSuite#oysterNumber}",
"passengerType":"${#TestSuite#passengerType}"
}</con:request>
<con:originalUri>http://localhost/nemo-mock-cubic/service/card/add</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.prestigeId != null
</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:authType>No Authorization</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get All Active Stations">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get All Active Stations" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/station/stations</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/station/stations</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.size >0
for(def x: json){
	assert x.id != null
}
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="groovy" name="Transfer Station">
<con:settings/>
<con:config>
<script>import groovy.json.JsonSlurper
def response = testRunner.testCase.testSteps["Station - Get All Active Stations"].testRequest.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response


for(def station: json){
	if(station.name == context.expand('${InitialInputs#stationName}')){
		testRunner.testCase.testSuite.setPropertyValue('stationid',station.id.toString())
	}
}
</script>
</con:config>
</con:testStep>
<con:testStep type="properties" name="InitialInputs">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>emailAddress</con:name>
<con:value>automatedTesting3746@gmail.com</con:value>
</con:property>
<con:property>
<con:name>dateString</con:name>
<con:value>06/01/2015</con:value>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>paygAmount</con:name>
<con:value>3000</con:value>
</con:property>
<con:property>
<con:name>stationName</con:name>
<con:value>Greenford</con:value>
</con:property>
<con:property>
<con:name>authRef</con:name>
<con:value>258456</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Customer - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Customer - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/customer</con:endpoint>
<con:request>{
"title" :"Miss",
"firstName" :"Samantha Wanda",
"initials" :"S",
"lastName" :"Jones",
"houseNameNumber" :"38",
"street" :"Nightingale Gardens",
"town" : "Rugby",
"county" :"Warwickshire",
"country" :"GB",
"postcode" :"CV230WT",
"homePhone" :"01234567891",
"mobilePhone" :"01234567899",
"emailAddress" :"${InitialInputs#emailAddress}",
"username":"${InitialInputs#emailAddress}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/customer/nemo-tfl-services/</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.errors == null
assert json.id != null
assert json.username == context.expand('${InitialInputs#emailAddress}')</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion">
<con:configuration/>
</con:assertion>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Customer">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45462</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Customer Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>customerid</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Customer</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false">
<con:name>testSuiteCustomerId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Customer - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>customerid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Card - Create">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${Customer#id}/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/36142/011538447556</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.id != null
assert json.result == 'SUCCESS' </scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>testSuiteCardId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - Create</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>cardid</con:targetType>
<con:targetStep>#TestSuite#</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45465</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45466</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - GetPayAsYouGo">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetPayAsYouGo" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:endpoint>
<con:request>{
"amount":${InitialInputs#paygAmount}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getPayAsYouGo</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPrice">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="PAYG - Item">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>3000</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>Pay as you go credit</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Pay as you go</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="PAYG Item Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetPayAsYouGo</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>PAYG - Item</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="properties" name="7Day TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>price</con:name>
<con:value>2240</con:value>
</con:property>
<con:property>
<con:name>name</con:name>
<con:value>7 day Travelcard Zones 1 to 2</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1421020800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>1</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37978</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone":"${InitialInputs#startZone}",  
"endZone": "${InitialInputs#endZone}" ,
"startDate" : "${InitialInputs#dateString}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="7Day Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>price</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:price</con:sourcePath>
<con:targetType>price</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - Get7DayTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>7Day TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper().parseText response

assert json != null
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": ${Customer#id},
   "cartItems": [  
   {
   "errors": null,
   "price": ${PAYG - Item#price},
   "name": "${PAYG - Item#name}",
   "startDate": null,
   "formattedStartDate": null,
   "endDate": null,
   "formattedEndDate": null,
   "tradedDate": null,
   "formattedTradedDate": null,
   "reminderDate": null,
   "startZone": null,
   "endZone": null,
   "duration": null,
   "productType": "${PAYG - Item#productType}",
   "autoTopUpAmount": null
   },
   {
         "errors": null,
         "price": ${7Day TravelCard#price},
         "name": "${7Day TravelCard#name}",
         "startDate": ${7Day TravelCard#startDate},
         "endDate": ${7Day TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4 days prior",
         "startZone": ${7Day TravelCard#startZone},
         "endZone": ${7Day TravelCard#endZone},
         "duration": "${7Day TravelCard#duration}",
         "productType": "${7Day TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${7Day TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.cartItems != null
assert json.cartItems.size > 0
if(json.errors != null){
	assert json.errors.size == 0
}
assert json.errors == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - GetCart">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - GetCart" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36312</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent;
def json = new JsonSlurper().parseText res

assert json != null
assert json.id != null
assert json.errors == null
</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - StartCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - StartCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/start</con:endpoint>
<con:request>{
"stationId": ${#TestSuite#stationid}
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/start</con:originalUri>
<con:assertion type="Simple Contains" name="ContainsPaymentSettlementId">
<con:configuration>
<token>(?s).*paymentSettlementId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="Simple Contains" name="ContainsOrderId">
<con:configuration>
<token>(?s).*orderId.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Checkout">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>orderId</con:name>
<con:value>45470</con:value>
</con:property>
<con:property>
<con:name>paymentSettlementId</con:name>
<con:value>45471</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="Checkout Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>orderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:orderId</con:sourcePath>
<con:targetType>orderId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>paymentSettlementId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - StartCheckout</con:sourceStep>
<con:sourcePath>//*:paymentSettlementId</con:sourcePath>
<con:targetType>paymentSettlementId</con:targetType>
<con:targetStep>Checkout</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - Checkout Authorise">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Checkout Authorise" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/authorise</con:endpoint>
<con:request>{
"orderId": "${Checkout#orderId}",
"paymentCardSettlementId": "${Checkout#paymentSettlementId}", 
"paymentAuthoristationReference" : "${InitialInputs#authRef}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/authorise</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Cart - CompleteCheckout">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - CompleteCheckout" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/checkout/complete</con:endpoint>
<con:request>{
   "stationId": ${#TestSuite#stationid},
   "orderId": "${Checkout#orderId}",
   "paymentCardSettlementId": "${Checkout#paymentSettlementId}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151/checkout/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${Customer#id}/cancel/${Checkout#orderId}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/customer(36142/cancel/36170</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper 
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result == 'SUCCESS_AWAITING_REFUND_PAYMENT'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="properties" name="Order - Cancel">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45470</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep>
<con:testStep type="transfer" name="CancelOrder Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>cancelOrderId</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>CancelOrder</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Order - Cancel</con:targetStep>
</con:transfers>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="CancelOrder - Complete">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="CancelOrder - Complete" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/order/customer/${Customer#id}/cancel/${Order - Cancel#id}/complete</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/order/cusutomer/36142/cancel/36174/complete</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.result != null
assert json.result == 'SUCCESS'</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:testStep type="restrequest" name="Station - Get Outstanding Orders">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Station - Get Outstanding Orders" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/orders/customer/${Customer#id}/${Card#id}/outstanding</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/orders/customer/2834/2837/outstanding</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json != null
assert json.errors == null
assert json.name == null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep>
<con:properties/>
</con:testCase>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - 3 Month 29 Days" searchProperties="true" id="e1a9a562-0a63-476a-be5b-71c70d34f2c6"><con:settings/><con:testStep type="groovy" name="GetDate - 3Months30Days">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 30)
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="transfer" name="GenerateInputs Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>date1</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - NextDay</con:sourceStep><con:targetType>dateNextDay</con:targetType><con:targetStep>Input</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>date2</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - 3Months30Days</con:sourceStep><con:targetType>date3Months30Days</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Input"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>dateNextDay</con:name><con:value>06/01/2015</con:value></con:property><con:property><con:name>date3Months30Days</con:name><con:value>04/05/2015</con:value></con:property><con:property><con:name>zone2</con:name><con:value>2</con:value></con:property><con:property><con:name>zone10</con:name><con:value>10</con:value></con:property><con:property><con:name>7DayPrice</con:name><con:value>3960</con:value></con:property><con:property><con:name>months</con:name><con:value>3</con:value></con:property><con:property><con:name>days</con:name><con:value>29</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="transfer" name="7DayTravelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">








<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>price</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Product - Get7DayTravelcard</con:sourceStep><con:sourcePath>//*:price</con:sourcePath><con:targetType>7DayPrice</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config>
</con:testStep><con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"endDate":"${Input#date3Months30Days}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>3-4 months Travelcard Zones 2 to 10</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1430694000000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>10</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37536</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45465</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45486</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
def subPrice = Integer.valueOf(context.expand('${Input#7DayPrice}'))
def months = Integer.valueOf(context.expand('${Input#months}'))
def days = Integer.valueOf(context.expand('${Input#days}'))
def calculatedPrice = 3.84 * subPrice * (months+(days/30))
calculatedPrice = calculatedPrice/10;
def tPrice = Math.ceil(calculatedPrice);
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${Input#date3Months30Days}')
	assert item.duration == 'Unknown'
	assert item.price+"" == (int)(tPrice*10)+""
}</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/></con:testCase>
















<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - 4 Month 27 Days" searchProperties="true" id="388ee93c-a83e-413b-b41b-206044981973"><con:settings/><con:testStep type="groovy" name="GetDate - End Date">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 27)
calendar.add(Calendar.MONTH, 4)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="transfer" name="GenerateInputs Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>date1</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - NextDay</con:sourceStep><con:targetType>dateNextDay</con:targetType><con:targetStep>Input</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>date2</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - End Date</con:sourceStep><con:targetType>date4Months28Days</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Input"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>dateNextDay</con:name><con:value>06/01/2015</con:value></con:property><con:property><con:name>date4Months28Days</con:name><con:value>01/06/2015</con:value></con:property><con:property><con:name>zone2</con:name><con:value>2</con:value></con:property><con:property><con:name>zone10</con:name><con:value>10</con:value></con:property><con:property><con:name>7DayPrice</con:name><con:value>3960</con:value></con:property><con:property><con:name>months</con:name><con:value>4</con:value></con:property><con:property><con:name>days</con:name><con:value>27</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="transfer" name="7DayTravelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">








<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>price</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Product - Get7DayTravelcard</con:sourceStep><con:sourcePath>//*:price</con:sourcePath><con:targetType>7DayPrice</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config>
</con:testStep><con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"endDate":"${Input#date4Months28Days}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>4-5 months Travelcard Zones 2 to 10</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1433113200000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>10</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37580</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45465</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45488</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
   "discountType":"${#TestSuite#discountType}",
   "passengerType":"${#TestSuite#passengerType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
def subPrice = Integer.valueOf(context.expand('${Input#7DayPrice}'))
def months = Integer.valueOf(context.expand('${Input#months}'))
def days = Integer.valueOf(context.expand('${Input#days}'))
def calculatedPrice = 3.84 * subPrice * (months+(days/30))
calculatedPrice = calculatedPrice/10;
def tPrice = Math.ceil(calculatedPrice);
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${Input#date4Months28Days}')
	assert item.duration == 'Unknown'
	assert item.price+"" == (int)(tPrice*10)+""
}</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - 3 Month 15 Days" searchProperties="true" id="34548def-0480-4bdb-a453-8aaf0359a97e"><con:settings/><con:testStep type="groovy" name="GetDate - 3Months15Days">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 15)
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="transfer" name="GenerateInputs Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>date1</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - NextDay</con:sourceStep><con:targetType>dateNextDay</con:targetType><con:targetStep>Input</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>date2</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - 3Months15Days</con:sourceStep><con:targetType>date3Months15Days</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Input"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>dateNextDay</con:name><con:value>06/01/2015</con:value></con:property><con:property><con:name>date3Months15Days</con:name><con:value>20/04/2015</con:value></con:property><con:property><con:name>zone2</con:name><con:value>2</con:value></con:property><con:property><con:name>zone10</con:name><con:value>10</con:value></con:property><con:property><con:name>7DayPrice</con:name><con:value>3960</con:value></con:property><con:property><con:name>months</con:name><con:value>3</con:value></con:property><con:property><con:name>days</con:name><con:value>15</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="transfer" name="7DayTravelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">








<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>price</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Product - Get7DayTravelcard</con:sourceStep><con:sourcePath>//*:price</con:sourcePath><con:targetType>7DayPrice</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config>
</con:testStep><con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"endDate":"${Input#date3Months15Days}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>3-4 months Travelcard Zones 2 to 10</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1429484400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>10</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37536</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45465</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45490</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
def subPrice = Integer.valueOf(context.expand('${Input#7DayPrice}'))
def months = Integer.valueOf(context.expand('${Input#months}'))
def days = Integer.valueOf(context.expand('${Input#days}'))
def calculatedPrice = 3.84 * subPrice * (months+(days/30))
calculatedPrice = calculatedPrice/10;
def tPrice = Math.ceil(calculatedPrice);
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${Input#date3Months15Days}')
	assert item.duration == 'Unknown'
	assert item.price+"" == (int)(tPrice*10)+""
}</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - 2 Month 2 Days" searchProperties="true" id="f3e3f41b-3905-4b57-802d-5635a4350417"><con:settings/><con:testStep type="groovy" name="GetDate - 2Months2Days">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 2)
calendar.add(Calendar.MONTH, 2)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="transfer" name="GenerateInputs Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>date1</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - NextDay</con:sourceStep><con:targetType>dateNextDay</con:targetType><con:targetStep>Input</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>date2</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - 2Months2Days</con:sourceStep><con:targetType>date3Months15Days</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Input"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>dateNextDay</con:name><con:value>06/01/2015</con:value></con:property><con:property><con:name>date3Months15Days</con:name><con:value>07/03/2015</con:value></con:property><con:property><con:name>zone2</con:name><con:value>2</con:value></con:property><con:property><con:name>zone10</con:name><con:value>10</con:value></con:property><con:property><con:name>7DayPrice</con:name><con:value>3960</con:value></con:property><con:property><con:name>months</con:name><con:value>2</con:value></con:property><con:property><con:name>days</con:name><con:value>2</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="transfer" name="7DayTravelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">








<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>price</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Product - Get7DayTravelcard</con:sourceStep><con:sourcePath>//*:price</con:sourcePath><con:targetType>7DayPrice</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config>
</con:testStep><con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"endDate":"${Input#date3Months15Days}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>2-3 months Travelcard Zones 2 to 10</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1425686400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>10</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37492</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45465</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45492</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
def subPrice = Integer.valueOf(context.expand('${Input#7DayPrice}'))
def months = Integer.valueOf(context.expand('${Input#months}'))
def days = Integer.valueOf(context.expand('${Input#days}'))
def calculatedPrice = 3.84 * subPrice * (months+(days/30))
calculatedPrice = calculatedPrice/10;
def tPrice = Math.ceil(calculatedPrice);
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${Input#date3Months15Days}')
	assert item.duration == 'Unknown'
	assert item.price+"" == (int)(tPrice*10)+""
}</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - 3 Month 1 Days" searchProperties="true" id="251c4bfb-faca-4404-befe-e6d6352fb1f2"><con:settings/><con:testStep type="groovy" name="GetDate - 3Months1Day">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
calendar.add(Calendar.MONTH, 3)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="transfer" name="GenerateInputs Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>date1</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - NextDay</con:sourceStep><con:targetType>dateNextDay</con:targetType><con:targetStep>Input</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>date2</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - 3Months1Day</con:sourceStep><con:targetType>endDate</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Input"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>dateNextDay</con:name><con:value>06/01/2015</con:value></con:property><con:property><con:name>endDate</con:name><con:value>06/04/2015</con:value></con:property><con:property><con:name>zone2</con:name><con:value>2</con:value></con:property><con:property><con:name>zone10</con:name><con:value>10</con:value></con:property><con:property><con:name>7DayPrice</con:name><con:value>3960</con:value></con:property><con:property><con:name>months</con:name><con:value>3</con:value></con:property><con:property><con:name>days</con:name><con:value>1</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="transfer" name="7DayTravelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">








<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>price</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Product - Get7DayTravelcard</con:sourceStep><con:sourcePath>//*:price</con:sourcePath><con:targetType>7DayPrice</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config>
</con:testStep><con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"endDate":"${Input#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>3-4 months Travelcard Zones 2 to 10</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1428274800000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>10</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37536</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45465</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45494</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
def subPrice = Integer.valueOf(context.expand('${Input#7DayPrice}'))
def months = Integer.valueOf(context.expand('${Input#months}'))
def days = Integer.valueOf(context.expand('${Input#days}'))
def calculatedPrice = 3.84 * subPrice * (months+(days/30))
calculatedPrice = calculatedPrice/10;
def tPrice = Math.ceil(calculatedPrice);
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${Input#endDate}')
	assert item.duration == 'Unknown'
	assert item.price+"" == (int)(tPrice*10)+""
}</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Successful - 5 Months 9 Days" searchProperties="true" id="cbe8a36f-28da-4d03-9a39-ef500f6d13a1"><con:settings/><con:testStep type="groovy" name="GetDate - 5Months9Days">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 9)
calendar.add(Calendar.MONTH, 5)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="groovy" name="GetDate - NextDay">
<con:settings/>
<con:config><script>def calendar = Calendar.instance
calendar.add(Calendar.DATE, 1)
def day = calendar.get(Calendar.DATE)
if(day &lt;10){
	day = "0"+day
}
def month = (int)(calendar.get(Calendar.MONTH)+1)
if(month&lt;10){
	month = "0"+month
}
return (day+"/"+month+"/"+calendar.get(Calendar.YEAR))

</script></con:config>
</con:testStep><con:testStep type="transfer" name="GenerateInputs Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>date1</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - NextDay</con:sourceStep><con:targetType>dateNextDay</con:targetType><con:targetStep>Input</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>date2</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GetDate - 5Months9Days</con:sourceStep><con:targetType>endDate</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Input"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>dateNextDay</con:name><con:value>06/01/2015</con:value></con:property><con:property><con:name>endDate</con:name><con:value>14/06/2015</con:value></con:property><con:property><con:name>zone2</con:name><con:value>2</con:value></con:property><con:property><con:name>zone10</con:name><con:value>10</con:value></con:property><con:property><con:name>7DayPrice</con:name><con:value>3960</con:value></con:property><con:property><con:name>months</con:name><con:value>5</con:value></con:property><con:property><con:name>days</con:name><con:value>9</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Product - Get7DayTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - Get7DayTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#7Day}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="transfer" name="7DayTravelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">








<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>price</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Product - Get7DayTravelcard</con:sourceStep><con:sourcePath>//*:price</con:sourcePath><con:targetType>7DayPrice</con:targetType><con:targetStep>Input</con:targetStep></con:transfers></con:config>
</con:testStep><con:testStep type="restrequest" name="Product - GetOddPeriodTravelcard">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Product - GetOddPeriodTravelcard" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/product/getTravelcard</con:endpoint>
<con:request>{
"duration" : "${#TestSuite#Unknown}", 
"startZone": ${Input#zone2},  
"endZone": ${Input#zone10},
"startDate" : "${Input#dateNextDay}",
"endDate":"${Input#endDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}"
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/product/getTravelcard</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*price.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productType == 'Travelcard'
assert json.name != null</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Odd Period TravelCard">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>name</con:name>
<con:value>5-6 months Travelcard Zones 2 to 10</con:value>
</con:property>
<con:property>
<con:name>startDate</con:name>
<con:value>1420502400000</con:value>
</con:property>
<con:property>
<con:name>endDate</con:name>
<con:value>1434236400000</con:value>
</con:property>
<con:property>
<con:name>reminderDate</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>startZone</con:name>
<con:value>2</con:value>
</con:property>
<con:property>
<con:name>endZone</con:name>
<con:value>10</con:value>
</con:property>
<con:property>
<con:name>duration</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>productType</con:name>
<con:value>Travelcard</con:value>
</con:property>
<con:property>
<con:name>autoTopUpAmount</con:name>
<con:value/>
</con:property>
<con:property>
<con:name>prePaidProductReference</con:name>
<con:value>37623</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Odd Period Travelcard Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
<con:name>duration</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:duration</con:sourcePath>
<con:targetType>duration</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endDate</con:sourcePath>
<con:targetType>endDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>endZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:endZone</con:sourcePath>
<con:targetType>endZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>name</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:name</con:sourcePath>
<con:targetType>name</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>productType</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:productType</con:sourcePath>
<con:targetType>productType</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startDate</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startDate</con:sourcePath>
<con:targetType>startDate</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false">
<con:name>startZone</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:startZone</con:sourcePath>
<con:targetType>startZone</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
<con:targetPath xsi:nil="true"/>
</con:transfers>
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" ignoreEmpty="false" transferChildNodes="false" entitize="false" transferToAll="false">
<con:name>prePaidProductReference</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Product - GetOddPeriodTravelcard</con:sourceStep>
<con:sourcePath>//*:prePaidProductReference</con:sourcePath>
<con:targetType>prePaidProductReference</con:targetType>
<con:targetStep>Odd Period TravelCard</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Card - GetCard">
<con:settings/>
<con:config service="" methodName="GET" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Card - GetCard" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/card/${#TestSuite#oysterNumber}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/card/011243989450</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Card">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45465</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Card Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Card - GetCard</con:sourceStep>
<con:sourcePath>//*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Card</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Create">
<con:settings/>
<con:config service="" methodName="POST" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Create" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Card#id}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36150</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="properties" name="Cart">
<con:settings/>
<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:properties>
<con:property>
<con:name>id</con:name>
<con:value>45496</con:value>
</con:property>
</con:properties>
</con:config>
</con:testStep><con:testStep type="transfer" name="Cart-Create Transfer">
<con:settings/>
<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
<con:name>id</con:name>
<con:sourceType>ResponseAsXml</con:sourceType>
<con:sourceStep>Cart - Create</con:sourceStep>
<con:sourcePath>//*:Response/*:id</con:sourcePath>
<con:targetType>id</con:targetType>
<con:targetStep>Cart</con:targetStep>
</con:transfers>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Update/AddItems">
<con:settings/>
<con:config service="" methodName="PUT" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Update/AddItems" mediaType="application/json" postQueryString="false">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}</con:endpoint>
<con:request>{
   "errors": null,
   "id": ${Cart#id},
   "cardId": ${Card#id},
   "dateOfRefund": null,
   "formattedDateOfRefund": "",
   "cartType": null,
   "approvalId": null,
   "customerId": null,
   "concessionEndDate":"${InitInputs#concessionEndDate}",
"passengerType":"${#TestSuite#passengerType}",
"discountType":"${#TestSuite#discountType}",
   "cartItems": [  
   {
         "errors": null,
         "name": "${Odd Period TravelCard#name}",
         "startDate": ${Odd Period TravelCard#startDate},
         "endDate": ${Odd Period TravelCard#endDate},
         "tradedDate": null,
         "formattedTradedDate": "",
         "reminderDate": "4",
         "startZone": ${Odd Period TravelCard#startZone},
         "endZone": ${Odd Period TravelCard#endZone},
         "duration": "${Odd Period TravelCard#duration}",
         "productType": "${Odd Period TravelCard#productType}",
         "autoTopUpAmount": null,
         "prePaidProductReference":"${Odd Period TravelCard#prePaidProductReference}"
      }
   ]
}</con:request>
<con:originalUri>http://localhost/nemo-tfl-services/cart/36151</con:originalUri>
<con:assertion type="Simple Contains" name="Contains">
<con:configuration>
<token>(?s).*id.*</token>
<ignoreCase>false</ignoreCase>
<useRegEx>true</useRegEx>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="ContainsCartItems">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json.cartItems != null
assert json.cartItems.size > 0</scriptText>
</con:configuration>
</con:assertion>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration><scriptText>import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errors == null
assert json.cartItems != null
assert json.cartItems.size() > 0
def subPrice = Integer.valueOf(context.expand('${Input#7DayPrice}'))
def months = Integer.valueOf(context.expand('${Input#months}'))
def days = Integer.valueOf(context.expand('${Input#days}'))
def calculatedPrice = 3.84 * subPrice * (months+(days/30))
calculatedPrice = calculatedPrice/10;
def tPrice = Math.ceil(calculatedPrice);
for(def item: json.cartItems){
	assert item.formattedEndDate == context.expand('${Input#endDate}')
	assert item.duration == 'Unknown'
	assert item.price+"" == (int)(tPrice*10)+""
}</scriptText></con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:testStep type="restrequest" name="Cart - Delete">
<con:settings/>
<con:config service="" methodName="DELETE" resourcePath="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<con:restRequest name="Cart - Delete" mediaType="application/json">
<con:settings>
<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
<con:setting id="RecordRequestRepresentations">true</con:setting>
</con:settings>
<con:encoding>UTF-8</con:encoding>
<con:endpoint>http://localhost/nemo-tfl-services/cart/${Cart#id}/customer/${#TestSuite#customerid}</con:endpoint>
<con:request/>
<con:originalUri>http://localhost/nemo-tfl-services/cart/$(Cart</con:originalUri>
<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
<con:configuration>
<scriptText>import groovy.json.JsonSlurper
def res = messageExchange.response.responseContent
def json = new JsonSlurper().parseText res

assert json!= null
assert json.result != null
assert json.result == "SUCCESS"</scriptText>
</con:configuration>
</con:assertion>
<con:credentials>
<con:username>tfl-user</con:username>
<con:password>w3b53rv1c3s#$</con:password>
<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
<con:authType>Global HTTP Settings</con:authType>
</con:credentials>
<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
<con:jmsPropertyConfig/>
<con:parameters/>
</con:restRequest>
</con:config>
</con:testStep><con:properties/></con:testCase><con:properties>
<con:property>
<con:name>customerid</con:name>
<con:value>45462</con:value>
</con:property>
<con:property>
<con:name>cardid</con:name>
<con:value>45465</con:value>
</con:property>
<con:property>
<con:name>stationId</con:name>
<con:value>589</con:value>
</con:property>
<con:property>
<con:name>oysterNumber</con:name>
<con:value>024491637699</con:value>
</con:property>
<con:property>
<con:name>passengerType</con:name>
<con:value>Adult</con:value>
</con:property>
<con:property>
<con:name>discountType</con:name>
<con:value>18+</con:value>
</con:property>
<con:property>
<con:name>7Day</con:name>
<con:value>7Day</con:value>
</con:property>
<con:property>
<con:name>1Month</con:name>
<con:value>1Month</con:value>
</con:property>
<con:property>
<con:name>3Month</con:name>
<con:value>3Month</con:value>
</con:property>
<con:property>
<con:name>6Month</con:name>
<con:value>6Month</con:value>
</con:property>
<con:property>
<con:name>Unknown</con:name>
<con:value>Unknown</con:value>
</con:property>
<con:property>
<con:name>Annual</con:name>
<con:value>Annual</con:value>
</con:property>

</con:properties>
</con:testSuite><con:properties/>
<con:wssContainer/>
<con:oAuth2ProfileContainer/>
<con:sensitiveInformation/>
</con:soapui-project>