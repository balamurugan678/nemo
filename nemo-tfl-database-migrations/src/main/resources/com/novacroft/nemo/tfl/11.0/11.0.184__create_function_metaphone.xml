<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">
    <changeSet author="Novacroft" id="11.0.184">
        <createProcedure schemaName="${schemaName}">
            <![CDATA[
CREATE OR REPLACE FUNCTION Metaphone(
  v_pass_name VARCHAR2
)
/*
--===========================================================================
-- Copywright 2002, joel crainshaw and chet west
--===========================================================================
-- DESCRIPTION
--  PLSQL implementation of Lawrence Philips' Metaphone algorithm
--      METAPHONE function -- main function
--      DOLOGIC function -- called from METAPHONE
--
--  The Metaphone Algorithm is an algorithm which returns the rough
--  approximation of how an English word sounds.
--  The author (Lawrence Philips) can be contacted at LFP at dolby.com
--  The original Metaphone algorithm appeared in the
--  December 1990 issue of Computer Language.
--
--  This is an alternative to Oracle's built-in SOUNDEX.  Other advanced
--  versions of this algo. have been developed and metaphone is the basis
--  for some spell-checking programs
--===========================================================================
-- MODIFICATION HISTORY
-- Person      Date       Comments
-- ---------   ---------- ------------------------------------------
-- joel        03/15/2002 Initial coversion into PLSQL
--
--===========================================================================
*/
  RETURN VARCHAR2 IS
  meta_len  NUMBER;
  org_name  VARCHAR2(50);
  pass_name VARCHAR2(50) := v_pass_name;
  new_char  NUMBER;
  ret_name  VARCHAR2(50);
  BEGIN
-- If no length, return
    IF pass_name IS NULL
    THEN
      RETURN 'NO INPUT Value';
    END IF;

-- Initialization
    pass_name := upper(pass_name);
    org_name := '';

-- Parse out unwanted's
    FOR idx IN 1 .. LENGTH(pass_name) LOOP
      IF substr(pass_name, idx, 1) BETWEEN 'A' AND 'Z'
         OR substr(pass_name, idx, 1) BETWEEN '0' AND '9'
      THEN
        org_name := org_name || substr(pass_name, idx, 1);
      END IF;
    END LOOP;

-- If no length, return
    IF org_name IS NULL
    THEN
      RETURN NULL;
    END IF;

-- More initialization
    meta_len := LENGTH(org_name);
    ret_name := substr(org_name, 1, 1);

-- Main loop to generate metaphone
    FOR idx IN 2 .. meta_len LOOP
      IF substr(org_name, idx, 1) NOT BETWEEN '0' AND '9'
      THEN
        ret_name := ret_name || DoLogic(org_name, meta_len, idx);
      END IF;
    END LOOP;

    RETURN ret_name;
  END;
]]>
        </createProcedure>
    </changeSet>
</databaseChangeLog>
